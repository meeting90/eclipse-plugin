module names

imports


imports
  lib/analysis-library
  lib/analysis-library-internal
  lib/index-library
  include/C-without-macros
  desugar
  types


signature
  constructors
    Type        : DefDataKind
    Import      : DefDataKind
    Transitive  : ImportAnno
    CurrentFile : ImportAnno

  constructors
    CompilationUnit : Namespace
    Include         : Namespace
    Struct          : Namespace
    Type            : Namespace
    Field           : Namespace
    Function        : Namespace
    Variable        : Namespace


rules

  nam-get-scope-types :
    Start(x, _, _) -> [Struct(), Type(), Function()]

  nam-get-definition-keys :
    Start(x, _, _) -> [x]

  nam-get-definitions :
    Start(x, _, _) -> [(CompilationUnit(), [x])]

  nam-annotate-names(|paths__, path__):
    Start(x, _, _) -> <Start(nam-annotate-def(|path__), id, id)>

  nam-unique :
    Start(x, _, _) -> <id>


rules

  nam-get-definition-keys :
    Include(x) -> [x]

  nam-get-definitions :
    Include(x) -> [(Include(), [x])]

  nam-get-uses-keys :
    Include(x) -> [x]

  nam-get-uses :
    Include(x) -> [(CompilationUnit(), [x])]

  nam-annotate-names(|paths__, path__):
    Include(x) -> <Include(nam-annotate-def(|path__))>

  adjust-index-def-data(store__|namespace__, path__):
    Include(x) -> <store__> DefData(
                              [Struct()|[<index-file-to-string> <index-get-current-file>]]
                            , Import()
                            , (x, [CurrentFile()])
                            )

  adjust-index-def-data(store__|namespace__, path__):
    Include(x) -> <store__> DefData(
                              [Type()|[<index-file-to-string> <index-get-current-file>]]
                            , Import()
                            , (x, [CurrentFile()])
                            )

  adjust-index-def-data(store__|namespace__, path__):
    Include(x) -> <store__> DefData(
                              [Function()|[<index-file-to-string> <index-get-current-file>]]
                            , Import()
                            , (x, [CurrentFile()])
                            )


rules

  nam-get-scope-types :
    StructDecl(x, _) -> [Field()]

  nam-get-definition-keys :
    StructDecl(x, _) -> [x]

  nam-get-definitions :
    StructDecl(x, _) -> [(Struct(), [x])]

  nam-annotate-names(|paths__, path__):
    StructDecl(x, _) -> <StructDecl(nam-annotate-def(|path__), id)>

  adjust-index-def-data(store__|namespace__, path__):
    StructDecl(x, _) -> <store__> DefData(
                                    [namespace__|path__]
                                  , Type()
                                  , Type(x)
                                  )

  type-of :
    StructDecl(x, _) -> Type(x)

  nam-unique :
    StructDecl(x, _) -> <id>


rules

  nam-get-definition-keys :
    TypeDef(e, x) -> [x]

  nam-get-definitions :
    TypeDef(e, x) -> [(Type(), [x])]

  nam-annotate-names(|paths__, path__):
    TypeDef(e, x) -> <TypeDef(id, nam-annotate-def(|path__))>

  nam-unique :
    TypeDef(e, x) -> <id>


rules

  nam-get-uses-keys :
    Type(x) -> [x, "char", "int", "void"]

  nam-get-uses :
    Type(x) -> [ (Type(), [x])
               , (Type(), ["char"])
               , (Type(), ["int"])
               , (Type(), ["void"])
               ]

  nam-annotate-names(|paths__, path__):
    Type(x) -> <Type(nam-annotate-use(|paths__, Type()))>

  adjust-index-lookup(target__|namespace__, path__, prefix__):
    Type(x) -> <concat> [ [[Type()|path__]]
                        , [Def([Type(), "char"])]
                        , [Def([Type(), "int"])]
                        , [Def([Type(), "void"])]
                        ]
    where <target__> x


rules

  nam-get-uses-keys :
    StructRef(x) -> [x]

  nam-get-uses :
    StructRef(x) -> [(Struct(), [x])]

  nam-annotate-names(|paths__, path__):
    StructRef(x) -> <StructRef(nam-annotate-use(|paths__, Struct()))>


rules

  nam-get-definition-keys :
    Field(t, x) -> [x]

  nam-get-definitions :
    Field(t, x) -> [(Field(), [x])]

  nam-annotate-names(|paths__, path__):
    Field(t, x) -> <Field(id, nam-annotate-def(|path__))>

  adjust-index-def-data(store__|namespace__, path__):
    Field(t, x) -> <store__> DefData(
                               [namespace__|path__]
                             , Type()
                             , t
                             )

  type-of :
    Field(t, x) -> t

  nam-unique :
    Field(t, x) -> <id>


rules

  nam-ordered-def :
    VarDecl(t, x) -> <id>

  nam-get-definition-keys :
    VarDecl(t, x) -> [x]

  nam-get-definitions :
    VarDecl(t, x) -> [ ( Variable()
                       , [x, Anon(<new>)]
                       )
                     ]

  nam-annotate-names(|paths__, path__):
    VarDecl(t, x) -> <VarDecl(id, nam-annotate-def(|path__))>

  adjust-index-def-data(store__|namespace__, path__):
    VarDecl(t, x) -> <store__> DefData(
                                 [namespace__|path__]
                               , Type()
                               , t
                               )

  type-of :
    VarDecl(t, x) -> t

  nam-unique :
    VarDecl(t, x) -> <id>


rules

  nam-get-definition-keys :
    Param(t, x) -> [x]

  nam-get-definitions :
    Param(t, x) -> [(Variable(), [x])]

  nam-annotate-names(|paths__, path__):
    Param(t, x) -> <Param(id, nam-annotate-def(|path__))>

  adjust-index-def-data(store__|namespace__, path__):
    Param(t, x) -> <store__> DefData(
                               [namespace__|path__]
                             , Type()
                             , t
                             )

  type-of :
    Param(t, x) -> t

  nam-unique :
    Param(t, x) -> <id>


rules

  nam-get-uses-keys :
    VarRef(x) -> [x]

  nam-get-uses :
    VarRef(x) -> [(Variable(), [x])]

  nam-annotate-names(|paths__, path__):
    VarRef(x) -> <VarRef(nam-annotate-use(|paths__, Variable()))>


rules

  nam-get-uses-keys :
    Access(e, f) -> [f]

  nam-get-uses :
    Access(e, f) -> [(Field(), [f])]

  nam-annotate-names(|paths__, path__):
    Access(e, f) -> <Access(id, nam-annotate-use(|paths__, Field()))>


rules

  nam-get-scope-types :
    FunDecl(t, x, _, _) -> [Variable()]

  nam-get-definition-keys :
    FunDecl(t, x, _, _) -> [x]

  nam-get-definitions :
    FunDecl(t, x, _, _) -> [(Function(), [x])]

  nam-annotate-names(|paths__, path__):
    FunDecl(t, x, _, _) -> <FunDecl(id, nam-annotate-def(|path__), id, id)>

  adjust-index-def-data(store__|namespace__, path__):
    FunDecl(t, x, _, _) -> <store__> DefData(
                                       [namespace__|path__]
                                     , Type()
                                     , t
                                     )

  type-of :
    FunDecl(t, x, _, _) -> t

  nam-unique :
    FunDecl(t, x, _, _) -> <id>


rules

  nam-get-uses-keys :
    Call(x, _) -> [x]

  nam-get-uses :
    Call(x, _) -> [(Function(), [x])]

  nam-annotate-names(|paths__, path__):
    Call(x, _) -> <Call(nam-annotate-use(|paths__, Function()), id)>
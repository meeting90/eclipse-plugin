definition([module(unparameterized("Common"),[],[exports(conc-grammars(conc-grammars(lexical-syntax([prod([char-class(simple-charclass(present(conc(range(short("a"),short("z")),range(short("A"),short("Z")))))),iter-star(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),short("\\_"))))))))],sort("ID"),attrs([])),prod([opt(lit("-")),iter(char-class(simple-charclass(present(range(short("0"),short("9"))))))],sort("INT"),attrs([])),prod([iter-star(sort("StringChar"))],sort("UQSTRING"),attrs([])),prod([lit("\\\""),iter-star(sort("StringChar")),lit("\\\"")],sort("STRING"),attrs([])),prod([char-class(comp(simple-charclass(present(conc(short("\\\""),short("\\n"))))))],sort("StringChar"),attrs([])),prod([lit("\\\\\\\"")],sort("StringChar"),attrs([])),prod([sort("BackSlashChar")],sort("StringChar"),attrs([])),prod([lit("\\\\")],sort("BackSlashChar"),attrs([])),prod([char-class(simple-charclass(present(conc(short("\\ "),conc(short("\\t"),conc(short("\\n"),short("\\r")))))))],layout,attrs([])),prod([char-class(simple-charclass(present(short("\\*"))))],sort("CommentChar"),attrs([])),prod([lit("/*"),iter-star(alt(char-class(comp(simple-charclass(present(short("\\*"))))),sort("CommentChar"))),lit("*/")],layout,attrs([])),prod([lit("//"),iter-star(char-class(comp(simple-charclass(present(conc(short("\\n"),short("\\r"))))))),alt(char-class(simple-charclass(present(conc(short("\\n"),short("\\r"))))),sort("EOF"))],layout,attrs([])),prod([],sort("EOF"),attrs([]))]),lexical-restrictions([follow([sort("CommentChar")],single(char-class(simple-charclass(present(short("\\/")))))),follow([sort("INT")],single(char-class(simple-charclass(present(range(short("0"),short("9"))))))),follow([sort("ID")],single(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),short("\\_"))))))))),follow([sort("EOF")],single(char-class(comp(simple-charclass(absent))))),follow([sort("BackSlashChar")],single(char-class(simple-charclass(present(short("\\\""))))))])),context-free-restrictions([follow([opt(layout)],single(char-class(simple-charclass(present(conc(short("\\ "),conc(short("\\t"),conc(short("\\n"),short("\\r"))))))))),follow([opt(layout)],single(seq(simple-charclass(present(short("\\/"))),single(char-class(simple-charclass(present(short("\\/")))))))),follow([opt(layout)],single(seq(simple-charclass(present(short("\\/"))),single(char-class(simple-charclass(present(short("\\*"))))))))])))]),module(unparameterized("C-without-macros"),[imports([module(unparameterized("Common"))])],[exports(conc-grammars(context-free-start-symbols([sort("Start")]),context-free-syntax([prod([iter-star(sort("Include")),iter-star(sort("Definition"))],sort("Start"),attrs([term(cons("Start"))])),prod([lit("include"),lit("\\\""),sort("UQSTRING"),lit("\\\"")],sort("Include"),attrs([term(cons("Include"))])),prod([lit("include"),lit("<"),sort("UQSTRING"),lit(">")],sort("Include"),attrs([term(cons("Include"))])),prod([sort("Type"),sort("ID"),lit("("),iter-star-sep(sort("Param"),lit(",")),lit(")"),lit("{"),iter-star(sort("Stmt")),lit("}")],sort("Definition"),attrs([term(cons("FunDecl"))])),prod([sort("Type"),sort("ID")],sort("Param"),attrs([term(cons("Param"))])),prod([sort("TypeDecl"),lit(";")],sort("Definition"),attrs([term(cons("TypeDecl"))])),prod([lit("typedef"),sort("Type"),sort("ID")],sort("TypeDecl"),attrs([term(cons("TypeDef"))])),prod([lit("typedef"),sort("TypeDecl"),sort("ID")],sort("TypeDecl"),attrs([term(cons("TypeDef"))])),prod([lit("struct"),sort("ID"),lit("{"),iter-star(sort("Field")),lit("}")],sort("TypeDecl"),attrs([term(cons("StructDecl"))])),prod([sort("Type"),sort("ID"),lit(";")],sort("Field"),attrs([term(cons("Field"))])),prod([sort("Type"),sort("ID"),lit(";")],sort("Stmt"),attrs([term(cons("VarDecl"))])),prod([sort("Expr"),lit(";")],sort("Stmt"),attrs([term(cons("Stmt"))])),prod([sort("Expr"),lit("="),sort("Expr"),lit(";")],sort("Stmt"),attrs([term(cons("Assign"))])),prod([lit("return"),sort("Expr"),lit(";")],sort("Stmt"),attrs([term(cons("Return")),prefer])),prod([sort("STRING")],sort("Expr"),attrs([term(cons("StrLit"))])),prod([sort("INT")],sort("Expr"),attrs([term(cons("IntLit"))])),prod([sort("ID"),lit("("),iter-star-sep(sort("Expr"),lit(",")),lit(")")],sort("Expr"),attrs([term(cons("Call")),avoid])),prod([lit("sizeof"),lit("("),sort("Type"),lit(")")],sort("Expr"),attrs([term(cons("SizeOf"))])),prod([sort("Expr"),lit("."),sort("ID")],sort("Expr"),attrs([term(cons("Access"))])),prod([sort("Expr"),lit("->"),sort("ID")],sort("Expr"),attrs([term(cons("DerefAccess"))])),prod([lit("*"),sort("Expr")],sort("Expr"),attrs([term(cons("Deref"))])),prod([lit("&"),sort("Expr")],sort("Expr"),attrs([term(cons("Ref"))])),prod([sort("ID")],sort("Expr"),attrs([term(cons("VarRef"))])),prod([lit("("),sort("Type"),lit(")"),sort("Expr")],sort("Expr"),attrs([term(cons("Cast"))])),prod([sort("ID")],sort("Type"),attrs([term(cons("Type")),avoid])),prod([lit("char")],sort("Type"),attrs([term(cons("Char")),prefer])),prod([lit("int")],sort("Type"),attrs([term(cons("Int")),prefer])),prod([lit("void")],sort("Type"),attrs([term(cons("Void")),prefer])),prod([sort("Type"),lit("*")],sort("Type"),attrs([term(cons("Pointer")),assoc(left)])),prod([lit("struct"),sort("ID")],sort("Type"),attrs([term(cons("StructRef"))]))])))])])
definition
module Common

exports

  lexical syntax
  
    [a-zA-Z][a-zA-Z0-9\_]* -> ID
    "-"? [0-9]+            -> INT
    
    "\"" StringChar* "\"" -> STRING
    ~[\"\n]               -> StringChar
    "\\\""                -> StringChar
    BackSlashChar         -> StringChar
    "\\"                  -> BackSlashChar
    
    [\ \t\n\r] -> LAYOUT
    
    [\*]                             -> CommentChar
    "/*" (~[\*] | CommentChar)* "*/" -> LAYOUT
    "//" ~[\n\r]* ([\n\r] | EOF)     -> LAYOUT
    
    -> EOF
  
  lexical restrictions
  
    %% Ensure greedy matching for lexicals
  
    CommentChar   -/- [\/]
    INT           -/- [0-9]
    ID            -/- [a-zA-Z0-9\_]
    
    %% EOF may not be followed by any char
    
    EOF           -/- ~[]

    %% Backslash chars in strings may not be followed by " 
    
    BackSlashChar -/- [\"]

  context-free restrictions
  
    %% Ensure greedy matching for comments

    LAYOUT? -/- [\ \t\n\r]
    LAYOUT? -/- [\/].[\/]
    LAYOUT? -/- [\/].[\*]

module Calculang

imports Common

exports

  context-free start-symbols
    Start

  context-free syntax
    
    Exp -> Start {cons("Expr")}
    
    INT -> Exp {cons("Int")}
    
    Exp "*" Exp -> Exp {cons("Mul"), left}
    Exp "/" Exp -> Exp {cons("Div"), left}
    Exp "+" Exp -> Exp {cons("Plus"), left}
    Exp "-" Exp -> Exp {cons("Minus"), left}

    "(" Exp ")" -> Exp {bracket}

  context-free priorities
    
    { left:
      Exp "*" Exp -> Exp
      Exp "/" Exp -> Exp
    } >
    { left:  
      Exp "+" Exp -> Exp
      Exp "-" Exp -> Exp
    }
 
  context-free syntax
  
    Stm*        -> Start {cons("Stm")} 
    ID "=" Exp  -> Stm {cons("Assign")}
    ID          -> Exp {cons("Var")}
Module("check",[Imports([Import("libstratego-lib"),Import("include/Calculang"),Import("lib/editor-common.generated"),Import("calculate")]),Rules([RDefNoArgs("editor-analyze",Rule(NoAnnoList(Tuple([Var("ast"),Var("path"),Var("project-path")])),NoAnnoList(Tuple([Var("ast"),Var("errors"),Var("warnings"),Var("notes")])),[WithClause(Seq(CallNoArgs(SVar("editor-init")),Seq(CallNoArgs(SVar("analyze")),Seq(Assign(Var("errors"),App(CallNoArgs(SVar("constraint-errors")),Var("ast"))),Seq(Assign(Var("warnings"),NoAnnoList(List([]))),Assign(Var("notes"),App(CallNoArgs(SVar("constraint-notes")),Var("ast"))))))))])),SDefNoArgs("analyze",Seq(Call(SVar("topdown"),[Call(SVar("try"),[CallNoArgs(SVar("record-var"))])]),GenDynRules([AddDynRule(DynRuleId(RDecNoArgs("GetVar")),RuleNoCond(NoAnnoList(Str("\"PI\"")),NoAnnoList(Str("\"3.14\"")))),AddDynRule(DynRuleId(RDecNoArgs("GetValue")),RuleNoCond(NoAnnoList(Str("\"PI\"")),NoAnnoList(Real("3.14"))))]))),RDefNoArgs("record-var",Rule(NoAnnoList(Op("Assign",[Var("x"),Var("e")])),NoAnnoList(Op("Assign",[Var("x"),Var("e")])),[WithClause(Seq(CondChoice(BA(CallNoArgs(SVar("calculate")),Var("e")),Assign(Var("e2"),App(CallNoArgs(SVar("calculate")),Var("e"))),Assign(Var("e2"),NoAnnoList(Str("\"ERROR!\"")))),GenDynRules([AddDynRule(DynRuleId(RDecNoArgs("GetVar")),RuleNoCond(Var("x"),Var("e"))),AddDynRule(DynRuleId(RDecNoArgs("GetValue")),RuleNoCond(Var("x"),Var("e2")))])))])),SDefNoArgs("constraint-errors",Call(SVar("collect-all"),[CallNoArgs(SVar("constraint-error")),CallNoArgs(SVar("conc"))])),RDefNoArgs("constraint-error",Rule(NoAnnoList(Op("Var",[Var("x")])),NoAnnoList(Tuple([Var("x"),NoAnnoList(StringQuotation1("                    ",[QStr("Variable "),StringEscape1("                             ",Var("x")),QStr(" is not defined")]))])),Not(BA(CallNoArgs(SVar("GetVar")),Var("x"))))),RDefNoArgs("constraint-error",Rule(NoAnnoList(Op("Assign",[Var("x"),Wld])),NoAnnoList(Tuple([Var("x"),NoAnnoList(StringQuotation1("                          ",[QStr("Duplicate variable name")]))])),Not(AM(BA(CallNoArgs(SVar("length")),NoAnnoList(Tuple([App(CallNoArgs(SVar("bagof-GetVar")),Var("x"))]))),NoAnnoList(Int("1")))))),SDefNoArgs("constraint-notes",Call(SVar("collect-all"),[CallNoArgs(SVar("constraint-note")),CallNoArgs(SVar("conc"))])),RDefNoArgs("constraint-note",Rule(NoAnnoList(Op("Assign",[Var("x"),Var("e")])),NoAnnoList(Tuple([Var("x"),NoAnnoList(StringQuotation1("                          ",[QStr("Constant expression in assignment")]))])),Not(BA(Call(SVar("oncetd"),[CallNoArgs(SVar("is-var"))]),Var("e"))))),RDefNoArgs("is-var",RuleNoCond(NoAnnoList(Op("Var",[Var("x")])),NoAnnoList(Op("Var",[Var("x")]))))])])

definition

module Common
exports
  sorts WATER WATERTOKEN WATERTOKENSTART WATERTOKENSEPARATOR WATERTOKENSTAR

  lexical syntax
    [A-Za-z0-9\_]                  -> WATERTOKENSTART     {recover, avoid}
    WATERTOKENSTART [A-Za-z0-9\_]* -> WATERTOKEN          
    ~[A-Za-z0-9\_\ \t\12\r\n\*]    -> WATERTOKENSEPARATOR {recover, avoid}
    "*"                            -> WATERTOKENSTAR      {recover, avoid}
    WATERTOKEN                     -> WATER               
    WATERTOKENSEPARATOR            -> WATER               
    WATERTOKENSTAR                 -> WATER               
                                   -> WATEREOF            
    "completion123"                -> COMPLETIONPREFIX    {completion}
    "|#WATERTOKENSTAR|"            -> WATERTOKENSTAR      {completion}
    "|#STRING|"                    -> STRING              {completion}
    "|#StringChar|"                -> StringChar          {completion}
    "|#BackSlashChar|"             -> BackSlashChar       {completion}
    "|#Start|"                     -> Start               {completion}
    "|#Import|"                    -> Import              {completion}
    "|#ImportPart|"                -> ImportPart          {completion}
    "|#Definition|"                -> Definition          {completion}
    "|#AspectMember|"              -> AspectMember        {completion}
    "|#AdviceType|"                -> AdviceType          {completion}
    "|#JoinPoint|"                 -> JoinPoint           {completion}
    "|#Member|"                    -> Member              {completion}
    "|#Param|"                     -> Param               {completion}
    "|#Stm|"                       -> Stm                 {completion}
    "|#Exp|"                       -> Exp                 {completion}
    "|#Type|"                      -> Type                {completion}

  lexical restrictions
    WATERTOKEN -/- [A-Za-z0-9\_]
    WATERTOKENSTAR -/- [\/]

  context-free syntax
    WATER -> LAYOUT {cons("WATER")}

  (

  sorts WATEREOF

  lexical restrictions
    WATEREOF -/- ~[]

  lexical syntax
    %% Lexical insertion recovery rules                              
    "\""                                          -> INSERTOPENQUOTE {recover}
    INSERTOPENQUOTE StringChar* "\n"              -> STRING          {cons("INSERTEND")}
    INSERTOPENQUOTE StringChar* WATEREOF          -> STRING          {cons("INSERTEND")}
    "/*"                                          -> INSERTSTART     {recover}
    INSERTSTART ( ~[\*] | CommentChar )* WATEREOF -> LAYOUT          {cons("INSERTEND")}
                                                  -> "module"        {recover, cons("INSERTION")}
                                                  -> "entity"        {recover, cons("INSERTION")}
                                                  -> "import"        {recover, cons("INSERTION")}
                                                  -> "aspect"        {recover, cons("INSERTION")}
                                                  -> "pointcut"      {recover, cons("INSERTION")}
                                                  -> "advice"        {recover, cons("INSERTION")}
                                                  -> ")"             {recover, cons("INSERTION")}
                                                  -> "assigned"      {recover, cons("INSERTION")}
                                                  -> "}"             {recover, cons("INSERTION")}
                                                  -> ","             {recover, cons("INSERTION")}

  syntax
    %% Kernel syntax insertion recovery rules   

  )

  (

  lexical syntax
    [a-zA-Z] [a-zA-Z0-9]*              -> ID            
    "-"? [0-9]+                        -> INT           
    "\"" StringChar* "\""              -> STRING        
    ~[\"\n]                            -> StringChar    
    "\\\""                             -> StringChar    
    BackSlashChar                      -> StringChar    
    "\\"                               -> BackSlashChar 
    [\ \t\n\r]                         -> LAYOUT        
    [\*]                               -> CommentChar   
    "/*" ( ~[\*] | CommentChar )* "*/" -> LAYOUT        
    "//" ~[\n\r]* [\n\r] | EOF         -> LAYOUT        
                                       -> EOF           

  lexical restrictions
    CommentChar -/- [\/]
    INT -/- [0-9]
    ID -/- [a-zA-Z0-9\_]
    EOF -/- ~[]
    BackSlashChar -/- [\"]

  context-free restrictions
    LAYOUT? -/- [\ \t\n\r]
    LAYOUT? -/- [\/] . [\/]
    LAYOUT? -/- [\/] . [\*]

  )

module EntityWithAspects
imports Common

exports
  context-free start-symbols
    Start

  context-free syntax
    "module" ID Import* Definition*                                           -> Start        {cons("Module")}
    "entity" ID "{" Member* "}"                                               -> Definition   {cons("Entity")}
    "import" ImportPart                                                       -> Import       {cons("Import")}
    ID "." "*"                                                                -> ImportPart   {cons("WildcardImport")}
    ID "." ID                                                                 -> ImportPart   {cons("EntityImport")}
    "aspect" ID "{" AspectMember* "}"                                         -> Definition   {cons("Aspect")}
    "pointcut" ID "(" {Param ","}* ")" ":" {JoinPoint ","}+                   -> AspectMember {cons("Pointcut")}
    "advice" ID AdviceType "(" {Param ","}* ")" ":" ID "(" {Exp ","}* ")" Stm -> AspectMember {cons("Advice")}
    "before"                                                                  -> AdviceType   {cons("Before")}
    "after"                                                                   -> AdviceType   {cons("After")}
    "assigned" "(" Type ")"                                                   -> JoinPoint    {cons("Assigned")}
    ID ":" Type                                                               -> Member       {cons("Property")}
    ID "(" {Param ","}* ")" Stm                                               -> Member       {cons("Function")}
    ID ":" Type                                                               -> Param        {cons("Param")}
    "var" ID ":" Type                                                         -> Stm          {cons("VarDecl")}
    "var" ID ":" Type "=" Exp                                                 -> Stm          {cons("VarDeclInit")}
    Exp "=" Exp                                                               -> Stm          {cons("Assign")}
    "{" Stm* "}"                                                              -> Stm          {cons("Block")}
    "print" Exp                                                               -> Stm          {cons("Print")}
    ID "(" {Exp ","}* ")"                                                     -> Exp          {cons("Call")}
    ID                                                                        -> Exp          {cons("Var")}
    Exp "." ID                                                                -> Exp          {cons("PropAccess")}
    STRING                                                                    -> Exp          {cons("StringLit")}
    INT                                                                       -> Exp          {cons("IntLit")}
    ID                                                                        -> Type         {cons("Type")}
    "String"                                                                  -> Type         {cons("StringType"), prefer}
    "Int"                                                                     -> Type         {cons("IntType"), prefer}
Module("types",[Imports([Import("include/EntityWithAspects"),Import("lib/index-library"),Import("lib/analysis-library"),Import("names")]),Signature([Constructors([OpDecl("Type",FunType([ConstType(SortNoArgs("STRING"))],ConstType(SortNoArgs("Type"))))])]),Rules([RDefNoArgs("type-of",RuleNoCond(NoAnnoList(Op("Type",[Var("x")])),NoAnnoList(Op("Type",[Var("x")])))),RDefNoArgs("type-of",RuleNoCond(NoAnnoList(Op("StringType",[])),NoAnnoList(Op("Type",[NoAnnoList(Str("\"String\""))])))),RDefNoArgs("type-of",RuleNoCond(NoAnnoList(Op("IntType",[])),NoAnnoList(Op("Type",[NoAnnoList(Str("\"Int\""))])))),RDefNoArgs("type-of",RuleNoCond(NoAnnoList(Op("StringLit",[Wld])),App(CallNoArgs(SVar("type-of")),NoAnnoList(Op("StringType",[]))))),RDefNoArgs("type-of",RuleNoCond(NoAnnoList(Op("IntLit",[Wld])),App(CallNoArgs(SVar("type-of")),NoAnnoList(Op("IntType",[]))))),RDefNoArgs("type-of",RuleNoCond(NoAnnoList(Op("Var",[Var("v")])),App(CallNoArgs(SVar("type-of")),App(CallNoArgs(SVar("index-lookup")),Var("v"))))),RDefNoArgs("type-of",RuleNoCond(NoAnnoList(Op("PropAccess",[Var("e"),Var("p")])),App(CallNoArgs(SVar("type-of")),App(CallNoArgs(SVar("index-lookup")),Var("p"))))),RDefNoArgs("type-of",RuleNoCond(NoAnnoList(Op("Def",[Var("uri")])),App(CallNoArgs(SVar("type-of")),App(CallT(SVar("index-get-data"),[],[NoAnnoList(Op("Type",[]))]),NoAnnoList(Op("Def",[Var("uri")]))))))]),Rules([RDefNoArgs("is-assignable-to",Rule(NoAnnoList(Tuple([Var("to-type"),Var("from-type")])),Var("to-type"),BA(CallNoArgs(SVar("eq")),NoAnnoList(Tuple([Var("from-type"),Var("to-type")])))))]),Rules([SDefNoArgs("print-type",SwitchChoice(Match(Var("input")),[SwitchCase(Call(SVar("IntType"),[]),Build(NoAnnoList(Str("\"Int\"")))),SwitchCase(Call(SVar("StringType"),[]),Build(NoAnnoList(Str("\"String\"")))),SwitchCase(Call(SVar("Type"),[Match(Var("t"))]),BA(CallNoArgs(SVar("strip-annos")),Var("t"))),SwitchCase(ListCong([Match(Var("type"))],ListCongNoTail([])),BA(CallNoArgs(SVar("print-type")),Var("type"))),SwitchCase(Seq(ListCong([Match(Var("type"))],Match(Var("types"))),Not(BA(Match(NoAnnoList(List([]))),Var("types")))),Build(NoAnnoList(StringQuotation1("                                                  ",[StringEscape1("                                                  ",App(CallNoArgs(SVar("print-type")),Var("type"))),QStr(", "),StringEscape1("                                                                       ",App(CallNoArgs(SVar("print-type")),Var("types")))]))))],Seq(Match(NoAnnoList(Explode(Var("name"),Wld))),Build(NoAnnoList(StringQuotation1("                                ",[StringEscape1("                                ",Var("name"))])))))),SDefNoArgs("primitive-types",Build(NoAnnoList(List([NoAnnoList(Op("IntType",[])),NoAnnoList(Op("StringType",[]))])))),SDefNoArgs("is-primitive-type",Match(NoAnnoList(Op("IntType",[])))),SDefNoArgs("is-primitive-type",Match(NoAnnoList(Op("StringType",[])))),SDefNoArgs("is-primitive-type",Match(NoAnnoList(Op("Type",[NoAnnoList(Str("\"String\""))])))),SDefNoArgs("is-primitive-type",Match(NoAnnoList(Op("Type",[NoAnnoList(Str("\"Int\""))]))))])])
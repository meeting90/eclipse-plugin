Module("generate-test",[Imports([Import("libstratego-lib"),Import("include/EntityWithAspects"),Import("lib/editor-common.generated"),Import("lib/index-library"),Import("lib/analysis-library"),Import("lib/analysis-library-internal"),Import("types"),Import("names")]),Rules([SDefNoArgs("testgen-internal-file",Build(NoAnnoList(Str("\"/.internal/testgen\"")))),SDefNoArgs("testgen-module-name",Build(NoAnnoList(Str("\"TestGen\"")))),SDefNoArgs("testgen-num-files-per-group",Build(NoAnnoList(Int("10")))),SDefNoArgs("testgen-num-groups",Build(NoAnnoList(Int("1")))),SDefNoArgs("testgen-min-entities",Build(NoAnnoList(Int("3")))),SDefNoArgs("testgen-max-entities",Build(NoAnnoList(Int("5")))),SDefNoArgs("testgen-min-properties",Build(NoAnnoList(Int("30")))),SDefNoArgs("testgen-max-properties",Build(NoAnnoList(Int("100")))),SDefNoArgs("testgen-max-usertype-properties",Build(NoAnnoList(Int("1")))),SDefNoArgs("testgen-min-functions",Build(NoAnnoList(Int("1")))),SDefNoArgs("testgen-max-functions",Build(NoAnnoList(Int("5")))),SDefNoArgs("testgen-min-statements",Build(NoAnnoList(Int("3")))),SDefNoArgs("testgen-max-statements",Build(NoAnnoList(Int("10")))),SDefNoArgs("testgen-min-aspects",Build(NoAnnoList(Int("1")))),SDefNoArgs("testgen-max-aspects",Build(NoAnnoList(Int("3")))),SDefNoArgs("testgen-min-pointcutadvices",Build(NoAnnoList(Int("1")))),SDefNoArgs("testgen-max-pointcutadvices",Build(NoAnnoList(Int("3"))))]),Rules([SDefT("random-int",[],[DefaultVarDec("min"),DefaultVarDec("max")],BA(CallNoArgs(SVar("int")),App(CallNoArgs(SVar("add")),NoAnnoList(Tuple([App(CallNoArgs(SVar("add")),NoAnnoList(Tuple([App(CallNoArgs(SVar("mul")),NoAnnoList(Tuple([App(CallNoArgs(SVar("subt")),NoAnnoList(Tuple([Var("max"),App(CallNoArgs(SVar("inc")),Var("min"))]))),App(CallNoArgs(SVar("divr")),NoAnnoList(Tuple([App(CallNoArgs(SVar("abs")),RootApp(CallNoArgs(SVar("next-random")))),NoAnnoList(Int("1073741823"))])))]))),Var("min")]))),NoAnnoList(Real("0.5"))]))))),SDefNoArgs("random-string",Seq(CallNoArgs(SVar("new")),CallNoArgs(SVar("double-quote")))),SDefNoArgs("random-identifier",Seq(CallNoArgs(SVar("new")),CallT(SVar("string-replace"),[],[NoAnnoList(Str("\"_\"")),NoAnnoList(Str("\"\""))])))]),Rules([RDefNoArgs("random-type",Rule(Wld,Var("type"),[WithClause(Seq(Assign(Var("primtypes"),RootApp(CallNoArgs(SVar("primitive-types")))),Seq(Assign(Var("usertypes"),App(Call(SVar("map"),[LRule(RuleNoCond(NoAnnoList(Op("Def",[NoAnnoList(ListTail([Wld,Var("name")],Wld))])),Var("name")))]),App(CallT(SVar("index-get-children"),[],[NoAnnoList(Op("Entity",[])),NoAnnoList(Str("\"\""))]),NoAnnoList(Op("Def",[NoAnnoList(List([NoAnnoList(Op("Module",[])),RootApp(CallNoArgs(SVar("testgen-module-name")))]))]))))),Seq(AM(LChoice(BA(CallT(SVar("take"),[],[RootApp(CallNoArgs(SVar("testgen-max-usertype-properties")))]),Var("usertypes")),Build(Var("usertypes"))),Var("usertypes'")),Seq(Assign(Var("types"),App(CallNoArgs(SVar("concat")),NoAnnoList(List([Var("primtypes"),Var("primtypes"),Var("primtypes"),Var("primtypes"),Var("usertypes'")])))),Assign(Var("type"),App(CallNoArgs(SVar("random-list-item")),Var("types"))))))))]))]),Rules([SDefT("testgen-apply",[DefaultVarDec("strat")],[DefaultVarDec("num")],Seq(BA(CallNoArgs(SVar("range")),Var("num")),Call(SVar("map"),[CallNoArgs(SVar("strat"))]))),SDefT("random-apply",[DefaultVarDec("strat")],[DefaultVarDec("min-rand"),DefaultVarDec("max-rand")],CallT(SVar("testgen-apply"),[CallNoArgs(SVar("strat"))],[RootApp(CallT(SVar("random-int"),[],[Var("min-rand"),Var("max-rand")]))])),RDefNoArgs("random-list-item",Rule(Var("list"),Var("item"),Assign(Var("item"),App(CallNoArgs(SVar("index")),NoAnnoList(Tuple([RootApp(CallT(SVar("random-int"),[],[NoAnnoList(Int("1")),App(CallNoArgs(SVar("inc")),App(CallNoArgs(SVar("length")),Var("list")))])),Var("list")]))))))]),Rules([RDefT("testgen-add-ast",[],[DefaultVarDec("file")],Rule(Var("ast"),Var("ast3"),[WithClause(Seq(BA(CallNoArgs(SVar("index-set-current-file")),Var("file")),Seq(Assign(NoAnnoList(Tuple([NoAnnoList(Op("Some",[Var("ast2")])),Var("edefs")])),App(CallNoArgs(SVar("analyze-defs")),NoAnnoList(Op("Some",[Var("ast")])))),Seq(Assign(Var("defs"),App(Call(SVar("map"),[CallNoArgs(SVar("Snd"))]),Var("edefs"))),Seq(BA(CallT(SVar("index-add-all"),[],[Var("file")]),Var("defs")),Seq(Assign(Var("ast3"),App(Prim("\"SSL_EXT_clone_and_set_parents\"",[RootApp(Id)]),Var("ast2"))),Seq(Assign(Var("data"),App(Call(SVar("origin-track-forced"),[CallNoArgs(SVar("analyze-tree-data"))]),Var("ast3"))),Seq(Assign(NoAnnoList(Tuple([Var("data2"),Wld])),App(CallNoArgs(SVar("analyze-uses")),Var("data"))),BA(CallT(SVar("index-add-all"),[],[Var("file")]),Var("data2"))))))))))]))]),Rules([RDefT("testgen-write-file",[],[DefaultVarDec("file")],Rule(Var("ast"),NoAnnoList(Op("None",[])),[WithClause(Seq(Assign(Var("string"),App(CallNoArgs(SVar("pp-entitywithaspects-string")),Var("ast"))),Seq(Call(SVar("try"),[BA(CallNoArgs(SVar("mkdir")),App(CallNoArgs(SVar("abspath")),App(CallNoArgs(SVar("dirname")),Var("file"))))]),Seq(BA(CallNoArgs(SVar("fclose")),App(CallNoArgs(SVar("fputs")),NoAnnoList(Tuple([Var("string"),App(CallNoArgs(SVar("fopen")),NoAnnoList(Tuple([Var("file"),NoAnnoList(Str("\"w\""))])))])))),BA(Call(SVar("debug"),[Build(NoAnnoList(Str("\"Writing \"")))]),Var("file"))))))]))]),Rules([RDefNoArgs("testgen",Rule(NoAnnoList(Tuple([Var("selected"),Var("position"),Var("ast"),Var("path"),Var("project-path")])),NoAnnoList(Op("None",[])),[WithClause(Seq(Assign(Var("groups"),App(Call(SVar("map"),[LRule(RuleNoCond(Var("n"),NoAnnoList(Tuple([Var("project-path"),Var("n")]))))]),App(CallNoArgs(SVar("range")),RootApp(CallNoArgs(SVar("testgen-num-groups")))))),Seq(BA(Call(SVar("map"),[CallNoArgs(SVar("testgen-group"))]),Var("groups")),CallNoArgs(SVar("index-clear")))))])),RDefNoArgs("testgen-group",Rule(NoAnnoList(Tuple([Var("project-path"),Var("group")])),NoAnnoList(Op("None",[])),[WithClause(Seq(CallNoArgs(SVar("index-clear")),Seq(Assign(Var("files"),App(Call(SVar("map"),[LRule(RuleNoCond(Var("n"),NoAnnoList(StringQuotation1("                            ",[StringEscape1("                            ",Var("project-path")),QStr("/testgen/test_"),StringEscape1("                                                        ",Var("group")),QStr("_"),StringEscape1("                                                                ",Var("n")),QStr(".ewa")]))))]),App(CallNoArgs(SVar("range")),RootApp(CallNoArgs(SVar("testgen-num-files-per-group")))))),BA(Call(SVar("map"),[CallNoArgs(SVar("testgen-file"))]),App(CallNoArgs(SVar("reverse")),Var("files"))))))])),RDefNoArgs("testgen-file",Rule(Var("file"),NoAnnoList(Op("None",[])),[WithClause(Seq(Assign(Var("ast"),RootApp(CallNoArgs(SVar("testgen-module")))),Seq(BA(CallT(SVar("testgen-add-ast"),[],[Var("file")]),Var("ast")),BA(CallT(SVar("testgen-write-file"),[],[Var("file")]),Var("ast")))))])),RDefNoArgs("testgen-module",Rule(Wld,Var("mod"),[WithClause(Seq(Assign(Var("name"),RootApp(CallNoArgs(SVar("testgen-module-name")))),Seq(Assign(Var("entities"),RootApp(CallT(SVar("random-apply"),[CallNoArgs(SVar("testgen-entity"))],[RootApp(CallNoArgs(SVar("testgen-min-entities"))),RootApp(CallNoArgs(SVar("testgen-max-entities")))]))),Seq(Assign(Var("aspects"),RootApp(CallT(SVar("random-apply"),[CallNoArgs(SVar("testgen-aspect"))],[RootApp(CallNoArgs(SVar("testgen-min-aspects"))),RootApp(CallNoArgs(SVar("testgen-max-aspects")))]))),Assign(Var("mod"),NoAnnoList(Op("Module",[Var("name"),NoAnnoList(List([])),App(CallNoArgs(SVar("conc")),NoAnnoList(Tuple([Var("entities"),Var("aspects")])))])))))))])),RDefNoArgs("testgen-entity",Rule(Wld,Var("entity"),[WithClause(Seq(Assign(Var("name"),RootApp(CallNoArgs(SVar("random-identifier")))),Seq(Assign(Var("properties"),RootApp(CallT(SVar("random-apply"),[CallNoArgs(SVar("testgen-property"))],[RootApp(CallNoArgs(SVar("testgen-min-properties"))),RootApp(CallNoArgs(SVar("testgen-max-properties")))]))),Seq(Assign(Var("functions"),RootApp(CallT(SVar("random-apply"),[CallT(SVar("testgen-function"),[],[Var("properties")])],[RootApp(CallNoArgs(SVar("testgen-min-functions"))),RootApp(CallNoArgs(SVar("testgen-max-functions")))]))),Assign(Var("entity"),NoAnnoList(Op("Entity",[Var("name"),App(CallNoArgs(SVar("conc")),NoAnnoList(Tuple([Var("properties"),Var("functions")])))])))))))])),RDefNoArgs("testgen-property",Rule(Wld,Var("property"),[WithClause(Seq(Assign(Var("name"),RootApp(CallNoArgs(SVar("random-identifier")))),Seq(Assign(Var("type"),RootApp(CallNoArgs(SVar("random-type")))),Assign(Var("property"),NoAnnoList(Op("Property",[Var("name"),Var("type")]))))))])),RDefT("testgen-function",[],[DefaultVarDec("properties")],Rule(Wld,Var("function"),[WithClause(Seq(Assign(Var("name"),RootApp(CallNoArgs(SVar("random-identifier")))),Seq(Assign(Var("params"),NoAnnoList(List([]))),Seq(Assign(Var("statement"),NoAnnoList(Op("Block",[RootApp(CallT(SVar("random-apply"),[CallT(SVar("testgen-statement"),[],[Var("properties")])],[RootApp(CallNoArgs(SVar("testgen-min-statements"))),RootApp(CallNoArgs(SVar("testgen-max-statements")))]))]))),Assign(Var("function"),NoAnnoList(Op("Function",[Var("name"),Var("params"),Var("statement")])))))))])),RDefT("testgen-statement",[],[DefaultVarDec("properties")],Rule(Wld,Var("statement"),[WithClause(LChoice(Assign(Var("statement"),NoAnnoList(Op("Print",[RootApp(CallT(SVar("testgen-expression"),[],[Var("properties")]))]))),Assign(Var("statement"),NoAnnoList(Op("Print",[NoAnnoList(Op("StringLit",[RootApp(CallNoArgs(SVar("random-string")))]))])))))])),RDefT("testgen-expression",[],[DefaultVarDec("properties")],Rule(Wld,Var("expression"),Seq(Assign(NoAnnoList(Op("Property",[Var("name"),Var("type")])),App(CallNoArgs(SVar("random-list-item")),App(Call(SVar("filter"),[Seq(Match(NoAnnoList(Op("Property",[Wld,Var("t")]))),Not(BA(CallNoArgs(SVar("is-primitive-type")),Var("t"))))]),Var("properties")))),Seq(Assign(Var("def"),NoAnnoList(Op("Def",[NoAnnoList(List([NoAnnoList(Op("Type",[])),Var("type"),RootApp(CallNoArgs(SVar("testgen-module-name")))]))]))),Seq(Assign(NoAnnoList(Op("Def",[NoAnnoList(ListTail([Wld,Var("prop")],Wld))])),App(CallNoArgs(SVar("random-list-item")),App(CallT(SVar("index-get-children"),[],[NoAnnoList(Op("Property",[])),NoAnnoList(Str("\"\""))]),Var("def")))),Assign(Var("expression"),NoAnnoList(Op("PropAccess",[NoAnnoList(Op("Var",[Var("name")])),Var("prop")])))))))),RDefNoArgs("testgen-aspect",Rule(Wld,Var("aspect"),[WithClause(Seq(Assign(Var("name"),RootApp(CallNoArgs(SVar("random-identifier")))),Seq(Assign(Var("pointcutadvices"),App(CallNoArgs(SVar("concat")),RootApp(CallT(SVar("random-apply"),[CallNoArgs(SVar("testgen-pointcutadvice"))],[RootApp(CallNoArgs(SVar("testgen-min-pointcutadvices"))),RootApp(CallNoArgs(SVar("testgen-max-pointcutadvices")))])))),Assign(Var("aspect"),NoAnnoList(Op("Aspect",[Var("name"),Var("pointcutadvices")]))))))])),RDefNoArgs("testgen-pointcutadvice",Rule(Wld,NoAnnoList(List([Var("pointcut"),Var("advice")])),[WithClause(Seq(Assign(Var("pointcutName"),RootApp(CallNoArgs(SVar("random-identifier")))),Seq(Assign(Var("adviceName"),RootApp(CallNoArgs(SVar("random-identifier")))),Seq(Assign(Var("adviceParamName"),RootApp(CallNoArgs(SVar("random-identifier")))),Seq(Assign(Var("type"),RootApp(CallNoArgs(SVar("random-type")))),Seq(Assign(Var("pointcut"),NoAnnoList(Op("Pointcut",[Var("pointcutName"),NoAnnoList(List([NoAnnoList(Op("Param",[RootApp(CallNoArgs(SVar("random-identifier"))),Var("type")]))])),NoAnnoList(Op("Assigned",[Var("type")]))]))),Seq(Assign(Var("adviceType"),App(CallNoArgs(SVar("random-list-item")),NoAnnoList(List([NoAnnoList(Op("Before",[])),NoAnnoList(Op("After",[]))])))),Assign(Var("advice"),NoAnnoList(Op("Advice",[Var("adviceName"),Var("adviceType"),NoAnnoList(List([NoAnnoList(Op("Param",[Var("adviceParamName"),Var("type")]))])),Var("pointcutName"),NoAnnoList(List([NoAnnoList(Op("Var",[Var("adviceParamName")]))])),NoAnnoList(Op("Print",[NoAnnoList(Op("Var",[Var("adviceParamName")]))]))]))))))))))]))])])
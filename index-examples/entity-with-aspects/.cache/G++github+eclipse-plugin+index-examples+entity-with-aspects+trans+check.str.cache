Module("check",[Imports([Import("libstratego-lib"),Import("include/EntityWithAspects"),Import("lib/editor-common.generated"),Import("types")]),Rules([RDefNoArgs("constraint-error",Rule(As(Var("e"),NoAnnoList(Op("Assign",[Var("lhs"),Var("rhs")]))),NoAnnoList(Tuple([Var("e"),NoAnnoList(StringQuotation1("                                ",[QStr("Expected "),StringEscape1("                                         ",App(CallNoArgs(SVar("print-type")),Var("type1"))),QStr(" but found "),StringEscape1("                                                                        ",App(CallNoArgs(SVar("print-type")),Var("type2"))),QStr(".")]))])),Seq(Assign(Var("type1"),App(CallNoArgs(SVar("type-of")),Var("lhs"))),Seq(Assign(Var("type2"),App(CallNoArgs(SVar("type-of")),Var("rhs"))),Not(BA(CallNoArgs(SVar("is-assignable-to")),NoAnnoList(Tuple([Var("type1"),Var("type2")])))))))),RDefNoArgs("constraint-error",Rule(As(Var("e"),NoAnnoList(Op("VarDeclInit",[Var("var"),Var("type"),Var("exp")]))),NoAnnoList(Tuple([Var("e"),NoAnnoList(StringQuotation1("                                           ",[QStr("Expected "),StringEscape1("                                                    ",App(CallNoArgs(SVar("print-type")),Var("type1"))),QStr(" but found "),StringEscape1("                                                                                   ",App(CallNoArgs(SVar("print-type")),Var("type2"))),QStr(".")]))])),Seq(Assign(Var("type1"),App(CallNoArgs(SVar("type-of")),Var("type"))),Seq(Assign(Var("type2"),App(CallNoArgs(SVar("type-of")),Var("exp"))),Not(BA(CallNoArgs(SVar("is-assignable-to")),NoAnnoList(Tuple([Var("type1"),Var("type2")]))))))))]),Rules([SDefNoArgs("constraint-warning",Fail),SDefNoArgs("constraint-note",Fail)])])
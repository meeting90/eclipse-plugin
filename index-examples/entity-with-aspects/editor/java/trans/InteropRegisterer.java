package trans;

import org.strategoxt.stratego_lib.*;
import org.strategoxt.stratego_lib.*;
import org.strategoxt.lang.parallel.stratego_parallel.*;
import org.strategoxt.stratego_sglr.*;
import org.strategoxt.stratego_gpp.*;
import org.strategoxt.stratego_xtc.*;
import org.strategoxt.stratego_aterm.*;
import org.strategoxt.java_front.*;
import entitywithaspects.strategies.*;
import org.strategoxt.lang.*;
import org.spoofax.interpreter.terms.*;
import static org.strategoxt.lang.Term.*;
import org.spoofax.interpreter.library.AbstractPrimitive;
import java.util.ArrayList;
import java.lang.ref.WeakReference;

@SuppressWarnings("unused") public class InteropRegisterer extends org.strategoxt.lang.InteropRegisterer 
{ 
  @Override public void register(org.spoofax.interpreter.core.IContext context, Context compiledContext)
  { 
    register(context, compiledContext, context.getVarScope());
  }

  @Override public void registerLazy(org.spoofax.interpreter.core.IContext context, Context compiledContext, ClassLoader classLoader)
  { 
    registerLazy(context, compiledContext, classLoader, context.getVarScope());
  }

  private void register(org.spoofax.interpreter.core.IContext context, Context compiledContext, org.spoofax.interpreter.core.VarScope varScope)
  { 
    compiledContext.registerComponent("trans");
    trans.init(compiledContext);
    varScope.addSVar("nam_get_scope_types_0_0", new InteropSDefT(nam_get_scope_types_0_0.instance, context));
    varScope.addSVar("nam_get_definition_keys_0_0", new InteropSDefT(nam_get_definition_keys_0_0.instance, context));
    varScope.addSVar("nam_get_definitions_0_0", new InteropSDefT(nam_get_definitions_0_0.instance, context));
    varScope.addSVar("nam_annotate_names_0_2", new InteropSDefT(nam_annotate_names_0_2.instance, context));
    varScope.addSVar("nam_get_uses_keys_0_0", new InteropSDefT(nam_get_uses_keys_0_0.instance, context));
    varScope.addSVar("nam_get_uses_0_0", new InteropSDefT(nam_get_uses_0_0.instance, context));
    varScope.addSVar("adjust_index_lookup_1_3", new InteropSDefT(adjust_index_lookup_1_3.instance, context));
    varScope.addSVar("nam_unique_0_0", new InteropSDefT(nam_unique_0_0.instance, context));
    varScope.addSVar("adjust_index_def_data_1_2", new InteropSDefT(adjust_index_def_data_1_2.instance, context));
    varScope.addSVar("type_of_0_0", new InteropSDefT(type_of_0_0.instance, context));
    varScope.addSVar("create_quoted_libraries_0_0", new InteropSDefT(create_quoted_libraries_0_0.instance, context));
    varScope.addSVar("write_lib_0_0", new InteropSDefT(write_lib_0_0.instance, context));
    varScope.addSVar("list_string_replace_0_0", new InteropSDefT(list_string_replace_0_0.instance, context));
    varScope.addSVar("index_split_0_0", new InteropSDefT(index_split_0_0.instance, context));
    varScope.addSVar("index_is_toplevel_0_0", new InteropSDefT(index_is_toplevel_0_0.instance, context));
    varScope.addSVar("index_is_qualifier_0_0", new InteropSDefT(index_is_qualifier_0_0.instance, context));
    varScope.addSVar("index_qualifier_subelements_0_0", new InteropSDefT(index_qualifier_subelements_0_0.instance, context));
    varScope.addSVar("index_create_qualifier_0_1", new InteropSDefT(index_create_qualifier_0_1.instance, context));
    varScope.addSVar("testgen_internal_file_0_0", new InteropSDefT(testgen_internal_file_0_0.instance, context));
    varScope.addSVar("testgen_module_name_0_0", new InteropSDefT(testgen_module_name_0_0.instance, context));
    varScope.addSVar("testgen_num_files_per_group_0_0", new InteropSDefT(testgen_num_files_per_group_0_0.instance, context));
    varScope.addSVar("testgen_num_groups_0_0", new InteropSDefT(testgen_num_groups_0_0.instance, context));
    varScope.addSVar("testgen_min_entities_0_0", new InteropSDefT(testgen_min_entities_0_0.instance, context));
    varScope.addSVar("testgen_max_entities_0_0", new InteropSDefT(testgen_max_entities_0_0.instance, context));
    varScope.addSVar("testgen_min_properties_0_0", new InteropSDefT(testgen_min_properties_0_0.instance, context));
    varScope.addSVar("testgen_max_properties_0_0", new InteropSDefT(testgen_max_properties_0_0.instance, context));
    varScope.addSVar("testgen_max_usertype_properties_0_0", new InteropSDefT(testgen_max_usertype_properties_0_0.instance, context));
    varScope.addSVar("testgen_min_functions_0_0", new InteropSDefT(testgen_min_functions_0_0.instance, context));
    varScope.addSVar("testgen_max_functions_0_0", new InteropSDefT(testgen_max_functions_0_0.instance, context));
    varScope.addSVar("testgen_min_statements_0_0", new InteropSDefT(testgen_min_statements_0_0.instance, context));
    varScope.addSVar("testgen_max_statements_0_0", new InteropSDefT(testgen_max_statements_0_0.instance, context));
    varScope.addSVar("testgen_min_aspects_0_0", new InteropSDefT(testgen_min_aspects_0_0.instance, context));
    varScope.addSVar("testgen_max_aspects_0_0", new InteropSDefT(testgen_max_aspects_0_0.instance, context));
    varScope.addSVar("testgen_min_pointcutadvices_0_0", new InteropSDefT(testgen_min_pointcutadvices_0_0.instance, context));
    varScope.addSVar("testgen_max_pointcutadvices_0_0", new InteropSDefT(testgen_max_pointcutadvices_0_0.instance, context));
    varScope.addSVar("random_int_0_2", new InteropSDefT(random_int_0_2.instance, context));
    varScope.addSVar("random_string_0_0", new InteropSDefT(random_string_0_0.instance, context));
    varScope.addSVar("random_identifier_0_0", new InteropSDefT(random_identifier_0_0.instance, context));
    varScope.addSVar("random_type_0_0", new InteropSDefT(random_type_0_0.instance, context));
    varScope.addSVar("testgen_apply_1_1", new InteropSDefT(testgen_apply_1_1.instance, context));
    varScope.addSVar("random_apply_1_2", new InteropSDefT(random_apply_1_2.instance, context));
    varScope.addSVar("random_list_item_0_0", new InteropSDefT(random_list_item_0_0.instance, context));
    varScope.addSVar("testgen_add_ast_0_1", new InteropSDefT(testgen_add_ast_0_1.instance, context));
    varScope.addSVar("testgen_write_file_0_1", new InteropSDefT(testgen_write_file_0_1.instance, context));
    varScope.addSVar("testgen_0_0", new InteropSDefT(testgen_0_0.instance, context));
    varScope.addSVar("testgen_group_0_0", new InteropSDefT(testgen_group_0_0.instance, context));
    varScope.addSVar("testgen_file_0_0", new InteropSDefT(testgen_file_0_0.instance, context));
    varScope.addSVar("testgen_module_0_0", new InteropSDefT(testgen_module_0_0.instance, context));
    varScope.addSVar("testgen_entity_0_0", new InteropSDefT(testgen_entity_0_0.instance, context));
    varScope.addSVar("testgen_property_0_0", new InteropSDefT(testgen_property_0_0.instance, context));
    varScope.addSVar("testgen_function_0_1", new InteropSDefT(testgen_function_0_1.instance, context));
    varScope.addSVar("testgen_statement_0_1", new InteropSDefT(testgen_statement_0_1.instance, context));
    varScope.addSVar("testgen_expression_0_1", new InteropSDefT(testgen_expression_0_1.instance, context));
    varScope.addSVar("testgen_aspect_0_0", new InteropSDefT(testgen_aspect_0_0.instance, context));
    varScope.addSVar("testgen_pointcutadvice_0_0", new InteropSDefT(testgen_pointcutadvice_0_0.instance, context));
    varScope.addSVar("index_compile_ast_0_2", new InteropSDefT(index_compile_ast_0_2.instance, context));
    varScope.addSVar("to_java_0_0_fragment_1", new InteropSDefT(to_java_0_0_fragment_1.instance, context));
    varScope.addSVar("to_java_0_0_fragment_0", new InteropSDefT(to_java_0_0_fragment_0.instance, context));
    varScope.addSVar("to_java_0_0", new InteropSDefT(to_java_0_0.instance, context));
    varScope.addSVar("params_to_java_0_0", new InteropSDefT(params_to_java_0_0.instance, context));
    varScope.addSVar("params_to_java2_0_0", new InteropSDefT(params_to_java2_0_0.instance, context));
    varScope.addSVar("to_java_fixadvice_0_1", new InteropSDefT(to_java_fixadvice_0_1.instance, context));
    varScope.addSVar("to_java_aspect_replace_var_0_2", new InteropSDefT(to_java_aspect_replace_var_0_2.instance, context));
    varScope.addSVar("to_java_aspect_type_0_0", new InteropSDefT(to_java_aspect_type_0_0.instance, context));
    varScope.addSVar("is_assignable_to_0_0", new InteropSDefT(is_assignable_to_0_0.instance, context));
    varScope.addSVar("print_type_0_0", new InteropSDefT(print_type_0_0.instance, context));
    varScope.addSVar("primitive_types_0_0", new InteropSDefT(primitive_types_0_0.instance, context));
    varScope.addSVar("is_primitive_type_0_0", new InteropSDefT(is_primitive_type_0_0.instance, context));
    varScope.addSVar("constraint_error_0_0", new InteropSDefT(constraint_error_0_0.instance, context));
    varScope.addSVar("constraint_warning_0_0", new InteropSDefT(constraint_warning_0_0.instance, context));
    varScope.addSVar("constraint_note_0_0", new InteropSDefT(constraint_note_0_0.instance, context));
    varScope.addSVar("import_transitive_0_0", new InteropSDefT(import_transitive_0_0.instance, context));
    varScope.addSVar("import_standard_0_0", new InteropSDefT(import_standard_0_0.instance, context));
    varScope.addSVar("import_values_0_2", new InteropSDefT(import_values_0_2.instance, context));
    varScope.addSVar("import_currentfile_values_0_1", new InteropSDefT(import_currentfile_values_0_1.instance, context));
    varScope.addSVar("adjust_index_import_0_2", new InteropSDefT(adjust_index_import_0_2.instance, context));
    varScope.addSVar("import_defs_0_2", new InteropSDefT(import_defs_0_2.instance, context));
    varScope.addSVar("index_diff_constructors_0_0", new InteropSDefT(index_diff_constructors_0_0.instance, context));
    varScope.addSVar("index_diff_compare_0_0", new InteropSDefT(index_diff_compare_0_0.instance, context));
    varScope.addSVar("index_lookup_typed_0_1", new InteropSDefT(index_lookup_typed_0_1.instance, context));
    varScope.addSVar("index_lookup_all_typed_0_2", new InteropSDefT(index_lookup_all_typed_0_2.instance, context));
    varScope.addSVar("index_compare_nametype_equal_0_2", new InteropSDefT(index_compare_nametype_equal_0_2.instance, context));
    varScope.addSVar("index_compare_nametype_substring_0_2", new InteropSDefT(index_compare_nametype_substring_0_2.instance, context));
    varScope.addSVar("nbl_get_type_0_0", new InteropSDefT(nbl_get_type_0_0.instance, context));
    varScope.addSVar("nbl_type_eq_0_1", new InteropSDefT(nbl_type_eq_0_1.instance, context));
    varScope.addSVar("index_desugar_ast_0_0", new InteropSDefT(index_desugar_ast_0_0.instance, context));
    varScope.addSVar("index_is_partial_ast_0_0", new InteropSDefT(index_is_partial_ast_0_0.instance, context));
    varScope.addSVar("index_combine_asts_0_0", new InteropSDefT(index_combine_asts_0_0.instance, context));
    varScope.addSVar("index_schedule_compilation_0_0", new InteropSDefT(index_schedule_compilation_0_0.instance, context));
    varScope.addSVar("index_compilation_0_0", new InteropSDefT(index_compilation_0_0.instance, context));
    varScope.addSVar("index_split_partial_files_0_0", new InteropSDefT(index_split_partial_files_0_0.instance, context));
    varScope.addSVar("index_compilation_file_0_1", new InteropSDefT(index_compilation_file_0_1.instance, context));
    varScope.addSVar("index_compilation_partial_file_0_1", new InteropSDefT(index_compilation_partial_file_0_1.instance, context));
    varScope.addSVar("index_compilation_ast_0_2", new InteropSDefT(index_compilation_ast_0_2.instance, context));
    varScope.addSVar("index_compilation_filter_file_0_0", new InteropSDefT(index_compilation_filter_file_0_0.instance, context));
    varScope.addSVar("commit_and_compile_0_0", new InteropSDefT(commit_and_compile_0_0.instance, context));
    varScope.addSVar("trigger_commit_and_compile_0_0", new InteropSDefT(trigger_commit_and_compile_0_0.instance, context));
    varScope.addSVar("disable_commit_and_compile_0_0", new InteropSDefT(disable_commit_and_compile_0_0.instance, context));
    varScope.addSVar("enable_commit_and_compile_0_0", new InteropSDefT(enable_commit_and_compile_0_0.instance, context));
    varScope.addSVar("index_compilation_restore_read_file_0_0", new InteropSDefT(index_compilation_restore_read_file_0_0.instance, context));
    varScope.addSVar("index_compilation_clean_reads_0_0", new InteropSDefT(index_compilation_clean_reads_0_0.instance, context));
    varScope.addSVar("index_compilation_file_tuple_0_0", new InteropSDefT(index_compilation_file_tuple_0_0.instance, context));
    varScope.addSVar("index_compilation_read_path_0_0", new InteropSDefT(index_compilation_read_path_0_0.instance, context));
    varScope.addSVar("index_file_is_partial_0_0", new InteropSDefT(index_file_is_partial_0_0.instance, context));
    varScope.addSVar("analyze_top_internal_0_4", new InteropSDefT(analyze_top_internal_0_4.instance, context));
    varScope.addSVar("analyze_top_defs_0_0", new InteropSDefT(analyze_top_defs_0_0.instance, context));
    varScope.addSVar("analyze_top_data_0_2", new InteropSDefT(analyze_top_data_0_2.instance, context));
    varScope.addSVar("analyze_top_uses_0_2", new InteropSDefT(analyze_top_uses_0_2.instance, context));
    varScope.addSVar("analyze_top_store_ast_0_2", new InteropSDefT(analyze_top_store_ast_0_2.instance, context));
    varScope.addSVar("analyze_defs_0_0", new InteropSDefT(analyze_defs_0_0.instance, context));
    varScope.addSVar("analyze_defs_0_4", new InteropSDefT(analyze_defs_0_4.instance, context));
    varScope.addSVar("analyze_child_defs_0_4", new InteropSDefT(analyze_child_defs_0_4.instance, context));
    varScope.addSVar("construct_index_path_0_5", new InteropSDefT(construct_index_path_0_5.instance, context));
    varScope.addSVar("update_index_paths_0_1", new InteropSDefT(update_index_paths_0_1.instance, context));
    varScope.addSVar("lookup_index_path_0_0", new InteropSDefT(lookup_index_path_0_0.instance, context));
    varScope.addSVar("index_do_adjust_path_0_3", new InteropSDefT(index_do_adjust_path_0_3.instance, context));
    varScope.addSVar("analyze_uses_0_0", new InteropSDefT(analyze_uses_0_0.instance, context));
    varScope.addSVar("analyze_tree_data_0_0", new InteropSDefT(analyze_tree_data_0_0.instance, context));
    varScope.addSVar("analyze_tree_data_part_0_1", new InteropSDefT(analyze_tree_data_part_0_1.instance, context));
    varScope.addSVar("store_index_data_results_0_1", new InteropSDefT(store_index_data_results_0_1.instance, context));
    varScope.addSVar("index_parallel_analyze_1_0", new InteropSDefT(index_parallel_analyze_1_0.instance, context));
    varScope.addSVar("index_sequential_analyze_1_0", new InteropSDefT(index_sequential_analyze_1_0.instance, context));
    varScope.addSVar("index_analyze_1_0", new InteropSDefT(index_analyze_1_0.instance, context));
    varScope.addSVar("index_parse_file_0_0", new InteropSDefT(index_parse_file_0_0.instance, context));
    varScope.addSVar("index_set_markers_0_0", new InteropSDefT(index_set_markers_0_0.instance, context));
    varScope.addSVar("index_do_analysis_1_0", new InteropSDefT(index_do_analysis_1_0.instance, context));
    varScope.addSVar("index_toplevel_split_0_0", new InteropSDefT(index_toplevel_split_0_0.instance, context));
    varScope.addSVar("index_toplevel_split_internal_0_0", new InteropSDefT(index_toplevel_split_internal_0_0.instance, context));
    varScope.addSVar("index_transform_qualifier_0_1", new InteropSDefT(index_transform_qualifier_0_1.instance, context));
    varScope.addSVar("analyze_diff_0_0", new InteropSDefT(analyze_diff_0_0.instance, context));
    varScope.addSVar("analyze_store_diff_0_2", new InteropSDefT(analyze_store_diff_0_2.instance, context));
    varScope.addSVar("analyze_astdiff_0_0", new InteropSDefT(analyze_astdiff_0_0.instance, context));
    varScope.addSVar("analyze_add_compilediff_0_0", new InteropSDefT(analyze_add_compilediff_0_0.instance, context));
    varScope.addSVar("analyze_get_compilediffs_0_0", new InteropSDefT(analyze_get_compilediffs_0_0.instance, context));
    varScope.addSVar("index_lookup_internal_4_3", new InteropSDefT(index_lookup_internal_4_3.instance, context));
    varScope.addSVar("index_lookup_internal_2_3", new InteropSDefT(index_lookup_internal_2_3.instance, context));
    varScope.addSVar("index_lookup_all_internal_4_3", new InteropSDefT(index_lookup_all_internal_4_3.instance, context));
    varScope.addSVar("index_lookup_all_internal_2_3", new InteropSDefT(index_lookup_all_internal_2_3.instance, context));
    varScope.addSVar("index_lookup_all_scoped_internal_4_3", new InteropSDefT(index_lookup_all_scoped_internal_4_3.instance, context));
    varScope.addSVar("index_lookup_all_scoped_internal_2_3", new InteropSDefT(index_lookup_all_scoped_internal_2_3.instance, context));
    varScope.addSVar("index_do_adjust_import_0_2", new InteropSDefT(index_do_adjust_import_0_2.instance, context));
    varScope.addSVar("index_get_adjust_import_results_3_2", new InteropSDefT(index_get_adjust_import_results_3_2.instance, context));
    varScope.addSVar("index_adjust_import_recurse_3_2", new InteropSDefT(index_adjust_import_recurse_3_2.instance, context));
    varScope.addSVar("index_do_adjust_lookup_0_4", new InteropSDefT(index_do_adjust_lookup_0_4.instance, context));
    varScope.addSVar("index_get_adjust_lookup_results_3_2", new InteropSDefT(index_get_adjust_lookup_results_3_2.instance, context));
    varScope.addSVar("index_get_defs_1_2", new InteropSDefT(index_get_defs_1_2.instance, context));
    varScope.addSVar("index_get_defs_prefix_1_2", new InteropSDefT(index_get_defs_prefix_1_2.instance, context));
    varScope.addSVar("index_compare_name_equal_0_1", new InteropSDefT(index_compare_name_equal_0_1.instance, context));
    varScope.addSVar("index_compare_name_substring_0_1", new InteropSDefT(index_compare_name_substring_0_1.instance, context));
    varScope.addSVar("index_compare_name_substring_0_2", new InteropSDefT(index_compare_name_substring_0_2.instance, context));
    varScope.addSVar("index_uri_impl_0_0", new InteropSDefT(index_uri_impl_0_0.instance, context));
    varScope.addSVar("index_value_impl_0_0", new InteropSDefT(index_value_impl_0_0.instance, context));
    varScope.addSVar("unzip_analyzed_0_0", new InteropSDefT(unzip_analyzed_0_0.instance, context));
    varScope.addSVar("is_test_file_0_0", new InteropSDefT(is_test_file_0_0.instance, context));
    varScope.addSVar("is_test_language_0_0", new InteropSDefT(is_test_language_0_0.instance, context));
    varScope.addSVar("is_test_input_0_2", new InteropSDefT(is_test_input_0_2.instance, context));
    varScope.addSVar("fake_file_0_0", new InteropSDefT(fake_file_0_0.instance, context));
    varScope.addSVar("ast_uri_to_ast_file_0_1", new InteropSDefT(ast_uri_to_ast_file_0_1.instance, context));
    varScope.addSVar("index_readwildcard_substring_0_1", new InteropSDefT(index_readwildcard_substring_0_1.instance, context));
    varScope.addSVar("store_wildcard_read_0_3", new InteropSDefT(store_wildcard_read_0_3.instance, context));
    varScope.addSVar("index_is_unresolved_0_2", new InteropSDefT(index_is_unresolved_0_2.instance, context));
    varScope.addSVar("index_add_unresolved_0_2", new InteropSDefT(index_add_unresolved_0_2.instance, context));
    varScope.addSVar("index_file_dependent_construct_0_0", new InteropSDefT(index_file_dependent_construct_0_0.instance, context));
    varScope.addSVar("index_file_dependency_filter_0_0", new InteropSDefT(index_file_dependency_filter_0_0.instance, context));
    varScope.addSVar("index_eq_0_2", new InteropSDefT(index_eq_0_2.instance, context));
    varScope.addSVar("index_key_unwrap_0_0", new InteropSDefT(index_key_unwrap_0_0.instance, context));
    varScope.addSVar("nam_get_def_0_2", new InteropSDefT(nam_get_def_0_2.instance, context));
    varScope.addSVar("nam_annotate_def_0_1", new InteropSDefT(nam_annotate_def_0_1.instance, context));
    varScope.addSVar("nam_annotate_use_0_2", new InteropSDefT(nam_annotate_use_0_2.instance, context));
    varScope.addSVar("nam_annotate_use_0_4", new InteropSDefT(nam_annotate_use_0_4.instance, context));
    varScope.addSVar("nam_annotate_scope_0_1", new InteropSDefT(nam_annotate_scope_0_1.instance, context));
    varScope.addSVar("nam_ordered_def_0_0", new InteropSDefT(nam_ordered_def_0_0.instance, context));
    varScope.addSVar("nam_get_definition_0_0", new InteropSDefT(nam_get_definition_0_0.instance, context));
    varScope.addSVar("nam_get_definition_key_0_0", new InteropSDefT(nam_get_definition_key_0_0.instance, context));
    varScope.addSVar("nam_get_use_0_0", new InteropSDefT(nam_get_use_0_0.instance, context));
    varScope.addSVar("nam_get_use_key_0_0", new InteropSDefT(nam_get_use_key_0_0.instance, context));
    varScope.addSVar("nam_annotate_scopes_0_1", new InteropSDefT(nam_annotate_scopes_0_1.instance, context));
    varScope.addSVar("adjust_index_path_1_2", new InteropSDefT(adjust_index_path_1_2.instance, context));
    varScope.addSVar("analyze_top_0_1", new InteropSDefT(analyze_top_0_1.instance, context));
    varScope.addSVar("analyze_top_0_4", new InteropSDefT(analyze_top_0_4.instance, context));
    varScope.addSVar("index_parallel_analyze_files_1_0", new InteropSDefT(index_parallel_analyze_files_1_0.instance, context));
    varScope.addSVar("index_sequential_analyze_files_1_0", new InteropSDefT(index_sequential_analyze_files_1_0.instance, context));
    varScope.addSVar("index_analyze_files_1_0", new InteropSDefT(index_analyze_files_1_0.instance, context));
    varScope.addSVar("index_merge_ast_0_1", new InteropSDefT(index_merge_ast_0_1.instance, context));
    varScope.addSVar("index_get_data_0_1", new InteropSDefT(index_get_data_0_1.instance, context));
    varScope.addSVar("index_get_data_all_0_1", new InteropSDefT(index_get_data_all_0_1.instance, context));
    varScope.addSVar("index_get_use_0_0", new InteropSDefT(index_get_use_0_0.instance, context));
    varScope.addSVar("index_get_uses_all_0_0", new InteropSDefT(index_get_uses_all_0_0.instance, context));
    varScope.addSVar("index_get_reads_all_0_0", new InteropSDefT(index_get_reads_all_0_0.instance, context));
    varScope.addSVar("index_get_all_0_0", new InteropSDefT(index_get_all_0_0.instance, context));
    varScope.addSVar("index_get_all_values_0_0", new InteropSDefT(index_get_all_values_0_0.instance, context));
    varScope.addSVar("index_get_0_0", new InteropSDefT(index_get_0_0.instance, context));
    varScope.addSVar("index_get_value_0_0", new InteropSDefT(index_get_value_0_0.instance, context));
    varScope.addSVar("index_get_children_0_1", new InteropSDefT(index_get_children_0_1.instance, context));
    varScope.addSVar("index_get_children_2_1", new InteropSDefT(index_get_children_2_1.instance, context));
    varScope.addSVar("index_get_children_0_2", new InteropSDefT(index_get_children_0_2.instance, context));
    varScope.addSVar("index_get_children_2_2", new InteropSDefT(index_get_children_2_2.instance, context));
    varScope.addSVar("index_get_referenced_files_1_0", new InteropSDefT(index_get_referenced_files_1_0.instance, context));
    varScope.addSVar("index_get_dependent_files_0_0", new InteropSDefT(index_get_dependent_files_0_0.instance, context));
    varScope.addSVar("index_lookup_0_0", new InteropSDefT(index_lookup_0_0.instance, context));
    varScope.addSVar("index_lookup_all_0_0", new InteropSDefT(index_lookup_all_0_0.instance, context));
    varScope.addSVar("index_lookup_all_0_1", new InteropSDefT(index_lookup_all_0_1.instance, context));
    varScope.addSVar("index_lookup_all_scoped_0_0", new InteropSDefT(index_lookup_all_scoped_0_0.instance, context));
    varScope.addSVar("index_lookup_all_scoped_noimports_0_0", new InteropSDefT(index_lookup_all_scoped_noimports_0_0.instance, context));
    varScope.addSVar("index_lookup_all_scoped_0_1", new InteropSDefT(index_lookup_all_scoped_0_1.instance, context));
    varScope.addSVar("index_lookup_children_0_1", new InteropSDefT(index_lookup_children_0_1.instance, context));
    varScope.addSVar("index_lookup_children_0_2", new InteropSDefT(index_lookup_children_0_2.instance, context));
    varScope.addSVar("index_uri_namespace_0_0", new InteropSDefT(index_uri_namespace_0_0.instance, context));
    varScope.addSVar("index_uri_path_0_0", new InteropSDefT(index_uri_path_0_0.instance, context));
    varScope.addSVar("index_uri_name_0_0", new InteropSDefT(index_uri_name_0_0.instance, context));
    varScope.addSVar("index_is_definition_0_0", new InteropSDefT(index_is_definition_0_0.instance, context));
    varScope.addSVar("index_key_eq_0_0", new InteropSDefT(index_key_eq_0_0.instance, context));
    varScope.addSVar("index_filepairs_to_files_0_0", new InteropSDefT(index_filepairs_to_files_0_0.instance, context));
    varScope.addSVar("index_setup_0_2", new InteropSDefT(index_setup_0_2.instance, context));
    varScope.addSVar("index_setup_0_3", new InteropSDefT(index_setup_0_3.instance, context));
    varScope.addSVar("index_set_current_file_0_0", new InteropSDefT(index_set_current_file_0_0.instance, context));
    varScope.addSVar("index_add_0_1", new InteropSDefT(index_add_0_1.instance, context));
    varScope.addSVar("index_add_all_0_1", new InteropSDefT(index_add_all_0_1.instance, context));
    varScope.addSVar("index_remove_0_1", new InteropSDefT(index_remove_0_1.instance, context));
    varScope.addSVar("index_remove_all_0_1", new InteropSDefT(index_remove_all_0_1.instance, context));
    varScope.addSVar("index_clear_file_0_0", new InteropSDefT(index_clear_file_0_0.instance, context));
    varScope.addSVar("index_clear_0_0", new InteropSDefT(index_clear_0_0.instance, context));
    varScope.addSVar("index_reload_0_0", new InteropSDefT(index_reload_0_0.instance, context));
    varScope.addSVar("index_commit_0_0", new InteropSDefT(index_commit_0_0.instance, context));
    varScope.addSVar("index_start_transaction_0_0", new InteropSDefT(index_start_transaction_0_0.instance, context));
    varScope.addSVar("index_end_transaction_0_0", new InteropSDefT(index_end_transaction_0_0.instance, context));
    varScope.addSVar("index_transaction_1_0", new InteropSDefT(index_transaction_1_0.instance, context));
    varScope.addSVar("index_get_current_file_0_0", new InteropSDefT(index_get_current_file_0_0.instance, context));
    varScope.addSVar("index_get_all_files_0_0", new InteropSDefT(index_get_all_files_0_0.instance, context));
    varScope.addSVar("index_get_all_in_file_0_0", new InteropSDefT(index_get_all_in_file_0_0.instance, context));
    varScope.addSVar("index_get_all_in_file_0_1", new InteropSDefT(index_get_all_in_file_0_1.instance, context));
    varScope.addSVar("index_get_file_revision_0_0", new InteropSDefT(index_get_file_revision_0_0.instance, context));
    varScope.addSVar("index_get_files_of_0_0", new InteropSDefT(index_get_files_of_0_0.instance, context));
    varScope.addSVar("indexlib_get_all_0_0", new InteropSDefT(indexlib_get_all_0_0.instance, context));
    varScope.addSVar("indexlib_get_all_values_0_0", new InteropSDefT(indexlib_get_all_values_0_0.instance, context));
    varScope.addSVar("indexlib_get_0_0", new InteropSDefT(indexlib_get_0_0.instance, context));
    varScope.addSVar("indexlib_get_value_0_0", new InteropSDefT(indexlib_get_value_0_0.instance, context));
    varScope.addSVar("index_globals_path_0_0", new InteropSDefT(index_globals_path_0_0.instance, context));
    varScope.addSVar("index_globals_uri_0_0", new InteropSDefT(index_globals_uri_0_0.instance, context));
    varScope.addSVar("index_get_global_0_1", new InteropSDefT(index_get_global_0_1.instance, context));
    varScope.addSVar("index_get_all_globals_0_1", new InteropSDefT(index_get_all_globals_0_1.instance, context));
    varScope.addSVar("index_add_global_0_1", new InteropSDefT(index_add_global_0_1.instance, context));
    varScope.addSVar("index_set_global_0_1", new InteropSDefT(index_set_global_0_1.instance, context));
    varScope.addSVar("index_clear_global_0_1", new InteropSDefT(index_clear_global_0_1.instance, context));
    varScope.addSVar("index_boolean_globals_uri_0_0", new InteropSDefT(index_boolean_globals_uri_0_0.instance, context));
    varScope.addSVar("index_enable_global_0_1", new InteropSDefT(index_enable_global_0_1.instance, context));
    varScope.addSVar("index_disable_global_0_1", new InteropSDefT(index_disable_global_0_1.instance, context));
    varScope.addSVar("index_is_global_enabled_0_1", new InteropSDefT(index_is_global_enabled_0_1.instance, context));
    varScope.addSVar("index_uri_0_0", new InteropSDefT(index_uri_0_0.instance, context));
    varScope.addSVar("index_uri_parent_0_0", new InteropSDefT(index_uri_parent_0_0.instance, context));
    varScope.addSVar("index_value_0_0", new InteropSDefT(index_value_0_0.instance, context));
    varScope.addSVar("index_is_fake_file_0_0", new InteropSDefT(index_is_fake_file_0_0.instance, context));
    varScope.addSVar("index_uri_eq_0_0", new InteropSDefT(index_uri_eq_0_0.instance, context));
    varScope.addSVar("index_find_key_0_0", new InteropSDefT(index_find_key_0_0.instance, context));
    varScope.addSVar("index_path_to_string_0_0", new InteropSDefT(index_path_to_string_0_0.instance, context));
    varScope.addSVar("index_uri_to_string_0_0", new InteropSDefT(index_uri_to_string_0_0.instance, context));
    varScope.addSVar("index_file_to_string_0_0", new InteropSDefT(index_file_to_string_0_0.instance, context));
    varScope.addSVar("index_file_to_uri_0_0", new InteropSDefT(index_file_to_uri_0_0.instance, context));
    varScope.addSVar("index_uri_generic_0_0", new InteropSDefT(index_uri_generic_0_0.instance, context));
    varScope.addSVar("index_value_generic_0_0", new InteropSDefT(index_value_generic_0_0.instance, context));
    varScope.addSVar("index_namespace_unwrap_0_0", new InteropSDefT(index_namespace_unwrap_0_0.instance, context));
    varScope.addSVar("index_uri_unwrap_0_0", new InteropSDefT(index_uri_unwrap_0_0.instance, context));
    varScope.addSVar("parse_file_0_0", new InteropSDefT(parse_file_0_0.instance, context));
    varScope.addSVar("parse_entitywithaspects_file_0_0", new InteropSDefT(parse_entitywithaspects_file_0_0.instance, context));
    varScope.addSVar("parse_string_0_0", new InteropSDefT(parse_string_0_0.instance, context));
    varScope.addSVar("parse_entitywithaspects_string_0_0", new InteropSDefT(parse_entitywithaspects_string_0_0.instance, context));
    varScope.addSVar("parse_stream_0_0", new InteropSDefT(parse_stream_0_0.instance, context));
    varScope.addSVar("parse_entitywithaspects_stream_0_0", new InteropSDefT(parse_entitywithaspects_stream_0_0.instance, context));
    varScope.addSVar("pp_entitywithaspects_string_0_0", new InteropSDefT(pp_entitywithaspects_string_0_0.instance, context));
    varScope.addSVar("language_0_0", new InteropSDefT(language_0_0.instance, context));
    varScope.addSVar("open_import_3_0", new InteropSDefT(open_import_3_0.instance, context));
    varScope.addSVar("open_wildcard_import_4_0", new InteropSDefT(open_wildcard_import_4_0.instance, context));
    varScope.addSVar("import_cache_path_0_0", new InteropSDefT(import_cache_path_0_0.instance, context));
    varScope.addSVar("project_path_0_0", new InteropSDefT(project_path_0_0.instance, context));
    varScope.addSVar("plugin_path_0_0", new InteropSDefT(plugin_path_0_0.instance, context));
    varScope.addSVar("candidate_sorts_0_0", new InteropSDefT(candidate_sorts_0_0.instance, context));
    varScope.addSVar("is_newer_0_0", new InteropSDefT(is_newer_0_0.instance, context));
    varScope.addSVar("editor_init_0_0", new InteropSDefT(editor_init_0_0.instance, context));
    varScope.addSVar("refresh_workspace_file_0_0", new InteropSDefT(refresh_workspace_file_0_0.instance, context));
    varScope.addSVar("string_starts_with_capital_0_0", new InteropSDefT(string_starts_with_capital_0_0.instance, context));
    varScope.addSVar("origin_term_0_0", new InteropSDefT(origin_term_0_0.instance, context));
    varScope.addSVar("origin_text_0_0", new InteropSDefT(origin_text_0_0.instance, context));
    varScope.addSVar("origin_offset_0_0", new InteropSDefT(origin_offset_0_0.instance, context));
    varScope.addSVar("origin_location_0_0", new InteropSDefT(origin_location_0_0.instance, context));
    varScope.addSVar("origin_line_0_0", new InteropSDefT(origin_line_0_0.instance, context));
    varScope.addSVar("origin_column_0_0", new InteropSDefT(origin_column_0_0.instance, context));
    varScope.addSVar("origin_file_0_0", new InteropSDefT(origin_file_0_0.instance, context));
    varScope.addSVar("origin_strip_0_0", new InteropSDefT(origin_strip_0_0.instance, context));
    varScope.addSVar("origin_equal_0_1", new InteropSDefT(origin_equal_0_1.instance, context));
    varScope.addSVar("origin_language_description_0_0", new InteropSDefT(origin_language_description_0_0.instance, context));
    varScope.addSVar("origin_language_0_0", new InteropSDefT(origin_language_0_0.instance, context));
    varScope.addSVar("origin_surrounding_comments_0_0", new InteropSDefT(origin_surrounding_comments_0_0.instance, context));
    varScope.addSVar("origin_documentation_comment_0_0", new InteropSDefT(origin_documentation_comment_0_0.instance, context));
    varScope.addSVar("documentation_comment_chars_0_0", new InteropSDefT(documentation_comment_chars_0_0.instance, context));
    varScope.addSVar("origin_track_forced_1_0", new InteropSDefT(origin_track_forced_1_0.instance, context));
    varScope.addSVar("origin_relative_path_0_0", new InteropSDefT(origin_relative_path_0_0.instance, context));
    varScope.addSVar("desugar_position_1_1", new InteropSDefT(desugar_position_1_1.instance, context));
    varScope.addSVar("at_position_1_1", new InteropSDefT(at_position_1_1.instance, context));
    varScope.addSVar("position_of_term_1_0", new InteropSDefT(position_of_term_1_0.instance, context));
    varScope.addSVar("position_of_term_1_1", new InteropSDefT(position_of_term_1_1.instance, context));
    varScope.addSVar("term_at_position_0_1", new InteropSDefT(term_at_position_0_1.instance, context));
    varScope.addSVar("parent_at_position_0_1", new InteropSDefT(parent_at_position_0_1.instance, context));
    varScope.addSVar("subterm_at_0_1", new InteropSDefT(subterm_at_0_1.instance, context));
    varScope.addSVar("set_markers_0_1", new InteropSDefT(set_markers_0_1.instance, context));
    varScope.addSVar("queue_analysis_0_0", new InteropSDefT(queue_analysis_0_0.instance, context));
    varScope.addSVar("analysis_count_0_0", new InteropSDefT(analysis_count_0_0.instance, context));
    varScope.addSVar("set_total_work_units_0_0", new InteropSDefT(set_total_work_units_0_0.instance, context));
    varScope.addSVar("complete_work_unit_0_0", new InteropSDefT(complete_work_unit_0_0.instance, context));
    varScope.addSVar("queue_strategy_0_2", new InteropSDefT(queue_strategy_0_2.instance, context));
    varScope.addSVar("set_analysis_backgrounded_0_0", new InteropSDefT(set_analysis_backgrounded_0_0.instance, context));
    varScope.addSVar("analyze_0_0", new InteropSDefT(analyze_0_0.instance, context));
    varScope.addSVar("editor_analyze_0_0", new InteropSDefT(editor_analyze_0_0.instance, context));
    varScope.addSVar("editor_save_0_0", new InteropSDefT(editor_save_0_0.instance, context));
    varScope.addSVar("editor_resolve_0_0", new InteropSDefT(editor_resolve_0_0.instance, context));
    varScope.addSVar("editor_hover_0_0", new InteropSDefT(editor_hover_0_0.instance, context));
    varScope.addSVar("editor_complete_0_0", new InteropSDefT(editor_complete_0_0.instance, context));
    varScope.addSVar("debug_generate_aterm_0_0", new InteropSDefT(debug_generate_aterm_0_0.instance, context));
    varScope.addSVar("debug_generate_deffed_0_0", new InteropSDefT(debug_generate_deffed_0_0.instance, context));
    varScope.addSVar("debug_generate_analyzed_0_0", new InteropSDefT(debug_generate_analyzed_0_0.instance, context));
    varScope.addSVar("debug_index_show_current_file_0_0", new InteropSDefT(debug_index_show_current_file_0_0.instance, context));
    varScope.addSVar("debug_index_show_all_files_0_0", new InteropSDefT(debug_index_show_all_files_0_0.instance, context));
    varScope.addSVar("debug_index_clear_current_0_0", new InteropSDefT(debug_index_clear_current_0_0.instance, context));
    varScope.addSVar("debug_index_clear_0_0", new InteropSDefT(debug_index_clear_0_0.instance, context));
    varScope.addSVar("debug_index_reload_0_0", new InteropSDefT(debug_index_reload_0_0.instance, context));
    varScope.addSVar("generate_test_files_0_0", new InteropSDefT(generate_test_files_0_0.instance, context));
    varScope.addSVar("editor_queue_analysis_0_0", new InteropSDefT(editor_queue_analysis_0_0.instance, context));
    varScope.addSVar("editor_parallel_analyze_0_0", new InteropSDefT(editor_parallel_analyze_0_0.instance, context));
    varScope.addSVar("editor_sequential_analyze_0_0", new InteropSDefT(editor_sequential_analyze_0_0.instance, context));
    varScope.addSVar("Type_0_0", new InteropSDefT($Type_0_0.instance, context));
    varScope.addSVar("Import_0_0", new InteropSDefT($Import_0_0.instance, context));
    varScope.addSVar("Transitive_0_0", new InteropSDefT($Transitive_0_0.instance, context));
    varScope.addSVar("CurrentFile_0_0", new InteropSDefT($Current$File_0_0.instance, context));
    varScope.addSVar("Module_0_0", new InteropSDefT($Module_0_0.instance, context));
    varScope.addSVar("Aspect_0_0", new InteropSDefT($Aspect_0_0.instance, context));
    varScope.addSVar("Pointcut_0_0", new InteropSDefT($Pointcut_0_0.instance, context));
    varScope.addSVar("Advice_0_0", new InteropSDefT($Advice_0_0.instance, context));
    varScope.addSVar("Entity_0_0", new InteropSDefT($Entity_0_0.instance, context));
    varScope.addSVar("Property_0_0", new InteropSDefT($Property_0_0.instance, context));
    varScope.addSVar("Function_0_0", new InteropSDefT($Function_0_0.instance, context));
    varScope.addSVar("Variable_0_0", new InteropSDefT($Variable_0_0.instance, context));
    varScope.addSVar("Pointcut_2_0", new InteropSDefT($Pointcut_2_0.instance, context));
    varScope.addSVar("ADVICE_4_0", new InteropSDefT($A$D$V$I$C$E_4_0.instance, context));
    varScope.addSVar("Advice_2_0", new InteropSDefT($Advice_2_0.instance, context));
    varScope.addSVar("Type_1_0", new InteropSDefT($Type_1_0.instance, context));
    varScope.addSVar("Results_7_0", new InteropSDefT($Results_7_0.instance, context));
    varScope.addSVar("ParallelResults_6_0", new InteropSDefT($Parallel$Results_6_0.instance, context));
    varScope.addSVar("Diff_0_0", new InteropSDefT($Diff_0_0.instance, context));
    varScope.addSVar("ASTDiff_0_0", new InteropSDefT($A$S$T$Diff_0_0.instance, context));
    varScope.addSVar("AST_0_0", new InteropSDefT($A$S$T_0_0.instance, context));
    varScope.addSVar("AST_2_0", new InteropSDefT($A$S$T_2_0.instance, context));
    varScope.addSVar("Scope_1_0", new InteropSDefT($Scope_1_0.instance, context));
    varScope.addSVar("Editor_0_0", new InteropSDefT($Editor_0_0.instance, context));
    varScope.addSVar("Compile_0_0", new InteropSDefT($Compile_0_0.instance, context));
    varScope.addSVar("Def_1_0", new InteropSDefT($Def_1_0.instance, context));
    varScope.addSVar("Use_1_0", new InteropSDefT($Use_1_0.instance, context));
    varScope.addSVar("BadUse_1_0", new InteropSDefT($Bad$Use_1_0.instance, context));
    varScope.addSVar("Read_1_0", new InteropSDefT($Read_1_0.instance, context));
    varScope.addSVar("ReadWildcard_2_0", new InteropSDefT($Read$Wildcard_2_0.instance, context));
    varScope.addSVar("Diff_2_0", new InteropSDefT($Diff_2_0.instance, context));
    varScope.addSVar("StopLookup_0_0", new InteropSDefT($Stop$Lookup_0_0.instance, context));
    varScope.addSVar("DefData_3_0", new InteropSDefT($Def$Data_3_0.instance, context));
    varScope.addSVar("Namespace_0_0", new InteropSDefT($Namespace_0_0.instance, context));
    varScope.addSVar("Unresolved_1_0", new InteropSDefT($Unresolved_1_0.instance, context));
    varScope.addSVar("INTERNAL__ERROR_0_0", new InteropSDefT($I$N$T$E$R$N$A$L__$E$R$R$O$R_0_0.instance, context));
    varScope.addSVar("Timestamp_0_0", new InteropSDefT($Timestamp_0_0.instance, context));
    varScope.addSVar("String_0_0", new InteropSDefT($String_0_0.instance, context));
    varScope.addSVar("Anon_1_0", new InteropSDefT($Anon_1_0.instance, context));
    varScope.addSVar("Anon_0_0", new InteropSDefT($Anon_0_0.instance, context));
    varScope.addSVar("FileEntries_2_0", new InteropSDefT($File$Entries_2_0.instance, context));
    varScope.addSVar("Global_0_0", new InteropSDefT($Global_0_0.instance, context));
    varScope.addSVar("Global_1_0", new InteropSDefT($Global_1_0.instance, context));
    varScope.addSVar("Global_2_0", new InteropSDefT($Global_2_0.instance, context));
    varScope.addSVar("COMPLETION_1_0", new InteropSDefT($C$O$M$P$L$E$T$I$O$N_1_0.instance, context));
    varScope.addSVar("NOCONTEXT_1_0", new InteropSDefT($N$O$C$O$N$T$E$X$T_1_0.instance, context));
    varScope.addSVar("MARKER_0_0", new InteropSDefT($M$A$R$K$E$R_0_0.instance, context));
    varScope.addSVar("True_0_0", new InteropSDefT($True_0_0.instance, context));
    varScope.addSVar("Module_2_0", new InteropSDefT($Module_2_0.instance, context));
    varScope.addSVar("Entity_2_0", new InteropSDefT($Entity_2_0.instance, context));
    varScope.addSVar("Property_2_0", new InteropSDefT($Property_2_0.instance, context));
    varScope.addSVar("IntType_0_0", new InteropSDefT($Int$Type_0_0.instance, context));
    varScope.addSVar("StringType_0_0", new InteropSDefT($String$Type_0_0.instance, context));
    varScope.addSVar("IntLit_1_0", new InteropSDefT($Int$Lit_1_0.instance, context));
    varScope.addSVar("StringLit_1_0", new InteropSDefT($String$Lit_1_0.instance, context));
    varScope.addSVar("PropAccess_2_0", new InteropSDefT($Prop$Access_2_0.instance, context));
    varScope.addSVar("Var_1_0", new InteropSDefT($Var_1_0.instance, context));
    varScope.addSVar("Call_2_0", new InteropSDefT($Call_2_0.instance, context));
    varScope.addSVar("Print_1_0", new InteropSDefT($Print_1_0.instance, context));
    varScope.addSVar("Block_1_0", new InteropSDefT($Block_1_0.instance, context));
    varScope.addSVar("Assign_2_0", new InteropSDefT($Assign_2_0.instance, context));
    varScope.addSVar("VarDeclInit_3_0", new InteropSDefT($Var$Decl$Init_3_0.instance, context));
    varScope.addSVar("VarDecl_2_0", new InteropSDefT($Var$Decl_2_0.instance, context));
    varScope.addSVar("Param_2_0", new InteropSDefT($Param_2_0.instance, context));
    varScope.addSVar("Function_3_0", new InteropSDefT($Function_3_0.instance, context));
    varScope.addSVar("Assigned_1_0", new InteropSDefT($Assigned_1_0.instance, context));
    varScope.addSVar("After_0_0", new InteropSDefT($After_0_0.instance, context));
    varScope.addSVar("Before_0_0", new InteropSDefT($Before_0_0.instance, context));
    varScope.addSVar("Advice_6_0", new InteropSDefT($Advice_6_0.instance, context));
    varScope.addSVar("Pointcut_3_0", new InteropSDefT($Pointcut_3_0.instance, context));
    varScope.addSVar("EntityImport_2_0", new InteropSDefT($Entity$Import_2_0.instance, context));
    varScope.addSVar("WildcardImport_1_0", new InteropSDefT($Wildcard$Import_1_0.instance, context));
    varScope.addSVar("Import_1_0", new InteropSDefT($Import_1_0.instance, context));
    varScope.addSVar("Aspect_2_0", new InteropSDefT($Aspect_2_0.instance, context));
    varScope.addSVar("Module_3_0", new InteropSDefT($Module_3_0.instance, context));
    varScope.addSVar("innermost_scope_Index_ReadSet_1_0", new InteropSDefT(innermost_scope_$Index_$Read$Set_1_0.instance, context));
    varScope.addSVar("DYNAMIC__CALLS_0_0", new InteropSDefT($D$Y$N$A$M$I$C__$C$A$L$L$S_0_0.instance, context));
    varScope.addSVar("undefine_Index_ReadSet_0_1", new InteropSDefT(undefine_$Index_$Read$Set_0_1.instance, context));
    varScope.addSVar("throw_Index_ReadSet_1_1", new InteropSDefT(throw_$Index_$Read$Set_1_1.instance, context));
    varScope.addSVar("continue_to_label_Index_ReadSet_0_1", new InteropSDefT(continue_to_label_$Index_$Read$Set_0_1.instance, context));
    varScope.addSVar("continue_Index_ReadSet_0_0", new InteropSDefT(continue_$Index_$Read$Set_0_0.instance, context));
    varScope.addSVar("break_bp_Index_ReadSet_0_0", new InteropSDefT(break_bp_$Index_$Read$Set_0_0.instance, context));
    varScope.addSVar("break_to_label_Index_ReadSet_0_1", new InteropSDefT(break_to_label_$Index_$Read$Set_0_1.instance, context));
    varScope.addSVar("break_Index_ReadSet_0_0", new InteropSDefT(break_$Index_$Read$Set_0_0.instance, context));
    varScope.addSVar("all_keys_Index_ReadSet_0_0", new InteropSDefT(all_keys_$Index_$Read$Set_0_0.instance, context));
    varScope.addSVar("bigfold_Index_ReadSet_1_0", new InteropSDefT(bigfold_$Index_$Read$Set_1_0.instance, context));
    varScope.addSVar("fold_Index_ReadSet_1_0", new InteropSDefT(fold_$Index_$Read$Set_1_0.instance, context));
    varScope.addSVar("bigchain_Index_ReadSet_0_0", new InteropSDefT(bigchain_$Index_$Read$Set_0_0.instance, context));
    varScope.addSVar("chain_Index_ReadSet_0_0", new InteropSDefT(chain_$Index_$Read$Set_0_0.instance, context));
    varScope.addSVar("bigbagof_Index_ReadSet_0_0", new InteropSDefT(bigbagof_$Index_$Read$Set_0_0.instance, context));
    varScope.addSVar("once_Index_ReadSet_0_0", new InteropSDefT(once_$Index_$Read$Set_0_0.instance, context));
    varScope.addSVar("reverse_bagof_Index_ReadSet_1_0", new InteropSDefT(reverse_bagof_$Index_$Read$Set_1_0.instance, context));
    varScope.addSVar("bagof_Index_ReadSet_0_0", new InteropSDefT(bagof_$Index_$Read$Set_0_0.instance, context));
    varScope.addSVar("Index_ReadSet_0_0", new InteropSDefT($Index_$Read$Set_0_0.instance, context));
    varScope.addSVar("aux_Index_ReadSet_0_1", new InteropSDefT(aux_$Index_$Read$Set_0_1.instance, context));
    varScope.addSVar("innermost_scope_Index_UnresolvedSet_1_0", new InteropSDefT(innermost_scope_$Index_$Unresolved$Set_1_0.instance, context));
    varScope.addSVar("undefine_Index_UnresolvedSet_0_1", new InteropSDefT(undefine_$Index_$Unresolved$Set_0_1.instance, context));
    varScope.addSVar("throw_Index_UnresolvedSet_1_1", new InteropSDefT(throw_$Index_$Unresolved$Set_1_1.instance, context));
    varScope.addSVar("continue_to_label_Index_UnresolvedSet_0_1", new InteropSDefT(continue_to_label_$Index_$Unresolved$Set_0_1.instance, context));
    varScope.addSVar("continue_Index_UnresolvedSet_0_0", new InteropSDefT(continue_$Index_$Unresolved$Set_0_0.instance, context));
    varScope.addSVar("break_bp_Index_UnresolvedSet_0_0", new InteropSDefT(break_bp_$Index_$Unresolved$Set_0_0.instance, context));
    varScope.addSVar("break_to_label_Index_UnresolvedSet_0_1", new InteropSDefT(break_to_label_$Index_$Unresolved$Set_0_1.instance, context));
    varScope.addSVar("break_Index_UnresolvedSet_0_0", new InteropSDefT(break_$Index_$Unresolved$Set_0_0.instance, context));
    varScope.addSVar("all_keys_Index_UnresolvedSet_0_0", new InteropSDefT(all_keys_$Index_$Unresolved$Set_0_0.instance, context));
    varScope.addSVar("bigfold_Index_UnresolvedSet_1_0", new InteropSDefT(bigfold_$Index_$Unresolved$Set_1_0.instance, context));
    varScope.addSVar("fold_Index_UnresolvedSet_1_0", new InteropSDefT(fold_$Index_$Unresolved$Set_1_0.instance, context));
    varScope.addSVar("bigchain_Index_UnresolvedSet_0_0", new InteropSDefT(bigchain_$Index_$Unresolved$Set_0_0.instance, context));
    varScope.addSVar("chain_Index_UnresolvedSet_0_0", new InteropSDefT(chain_$Index_$Unresolved$Set_0_0.instance, context));
    varScope.addSVar("bigbagof_Index_UnresolvedSet_0_0", new InteropSDefT(bigbagof_$Index_$Unresolved$Set_0_0.instance, context));
    varScope.addSVar("once_Index_UnresolvedSet_0_0", new InteropSDefT(once_$Index_$Unresolved$Set_0_0.instance, context));
    varScope.addSVar("reverse_bagof_Index_UnresolvedSet_1_0", new InteropSDefT(reverse_bagof_$Index_$Unresolved$Set_1_0.instance, context));
    varScope.addSVar("bagof_Index_UnresolvedSet_0_0", new InteropSDefT(bagof_$Index_$Unresolved$Set_0_0.instance, context));
    varScope.addSVar("Index_UnresolvedSet_0_0", new InteropSDefT($Index_$Unresolved$Set_0_0.instance, context));
    varScope.addSVar("aux_Index_UnresolvedSet_0_1", new InteropSDefT(aux_$Index_$Unresolved$Set_0_1.instance, context));
    varScope.addSVar("innermost_scope_CurrentFile_1_0", new InteropSDefT(innermost_scope_$Current$File_1_0.instance, context));
    varScope.addSVar("undefine_CurrentFile_0_1", new InteropSDefT(undefine_$Current$File_0_1.instance, context));
    varScope.addSVar("throw_CurrentFile_1_1", new InteropSDefT(throw_$Current$File_1_1.instance, context));
    varScope.addSVar("continue_to_label_CurrentFile_0_1", new InteropSDefT(continue_to_label_$Current$File_0_1.instance, context));
    varScope.addSVar("continue_CurrentFile_0_0", new InteropSDefT(continue_$Current$File_0_0.instance, context));
    varScope.addSVar("break_bp_CurrentFile_0_0", new InteropSDefT(break_bp_$Current$File_0_0.instance, context));
    varScope.addSVar("break_to_label_CurrentFile_0_1", new InteropSDefT(break_to_label_$Current$File_0_1.instance, context));
    varScope.addSVar("break_CurrentFile_0_0", new InteropSDefT(break_$Current$File_0_0.instance, context));
    varScope.addSVar("all_keys_CurrentFile_0_0", new InteropSDefT(all_keys_$Current$File_0_0.instance, context));
    varScope.addSVar("bigfold_CurrentFile_1_0", new InteropSDefT(bigfold_$Current$File_1_0.instance, context));
    varScope.addSVar("fold_CurrentFile_1_0", new InteropSDefT(fold_$Current$File_1_0.instance, context));
    varScope.addSVar("bigchain_CurrentFile_0_0", new InteropSDefT(bigchain_$Current$File_0_0.instance, context));
    varScope.addSVar("chain_CurrentFile_0_0", new InteropSDefT(chain_$Current$File_0_0.instance, context));
    varScope.addSVar("bigbagof_CurrentFile_0_0", new InteropSDefT(bigbagof_$Current$File_0_0.instance, context));
    varScope.addSVar("once_CurrentFile_0_0", new InteropSDefT(once_$Current$File_0_0.instance, context));
    varScope.addSVar("reverse_bagof_CurrentFile_1_0", new InteropSDefT(reverse_bagof_$Current$File_1_0.instance, context));
    varScope.addSVar("bagof_CurrentFile_0_0", new InteropSDefT(bagof_$Current$File_0_0.instance, context));
    varScope.addSVar("aux_CurrentFile_0_1", new InteropSDefT(aux_$Current$File_0_1.instance, context));
    varScope.addSVar("innermost_scope_IsImported_1_0", new InteropSDefT(innermost_scope_$Is$Imported_1_0.instance, context));
    varScope.addSVar("undefine_IsImported_0_1", new InteropSDefT(undefine_$Is$Imported_0_1.instance, context));
    varScope.addSVar("throw_IsImported_1_1", new InteropSDefT(throw_$Is$Imported_1_1.instance, context));
    varScope.addSVar("continue_to_label_IsImported_0_1", new InteropSDefT(continue_to_label_$Is$Imported_0_1.instance, context));
    varScope.addSVar("continue_IsImported_0_0", new InteropSDefT(continue_$Is$Imported_0_0.instance, context));
    varScope.addSVar("break_bp_IsImported_0_0", new InteropSDefT(break_bp_$Is$Imported_0_0.instance, context));
    varScope.addSVar("break_to_label_IsImported_0_1", new InteropSDefT(break_to_label_$Is$Imported_0_1.instance, context));
    varScope.addSVar("break_IsImported_0_0", new InteropSDefT(break_$Is$Imported_0_0.instance, context));
    varScope.addSVar("all_keys_IsImported_0_0", new InteropSDefT(all_keys_$Is$Imported_0_0.instance, context));
    varScope.addSVar("bigfold_IsImported_1_0", new InteropSDefT(bigfold_$Is$Imported_1_0.instance, context));
    varScope.addSVar("fold_IsImported_1_0", new InteropSDefT(fold_$Is$Imported_1_0.instance, context));
    varScope.addSVar("bigchain_IsImported_0_0", new InteropSDefT(bigchain_$Is$Imported_0_0.instance, context));
    varScope.addSVar("chain_IsImported_0_0", new InteropSDefT(chain_$Is$Imported_0_0.instance, context));
    varScope.addSVar("bigbagof_IsImported_0_0", new InteropSDefT(bigbagof_$Is$Imported_0_0.instance, context));
    varScope.addSVar("once_IsImported_0_0", new InteropSDefT(once_$Is$Imported_0_0.instance, context));
    varScope.addSVar("reverse_bagof_IsImported_1_0", new InteropSDefT(reverse_bagof_$Is$Imported_1_0.instance, context));
    varScope.addSVar("bagof_IsImported_0_0", new InteropSDefT(bagof_$Is$Imported_0_0.instance, context));
    varScope.addSVar("IsImported_0_0", new InteropSDefT($Is$Imported_0_0.instance, context));
    varScope.addSVar("aux_IsImported_0_2", new InteropSDefT(aux_$Is$Imported_0_2.instance, context));
  }

  private void registerLazy(org.spoofax.interpreter.core.IContext context, Context compiledContext, ClassLoader classLoader, org.spoofax.interpreter.core.VarScope varScope)
  { 
    compiledContext.registerComponent("trans");
    trans.init(compiledContext);
    varScope.addSVar("nam_get_scope_types_0_0", new InteropSDefT(classLoader, "trans.nam_get_scope_types_0_0", context));
    varScope.addSVar("nam_get_definition_keys_0_0", new InteropSDefT(classLoader, "trans.nam_get_definition_keys_0_0", context));
    varScope.addSVar("nam_get_definitions_0_0", new InteropSDefT(classLoader, "trans.nam_get_definitions_0_0", context));
    varScope.addSVar("nam_annotate_names_0_2", new InteropSDefT(classLoader, "trans.nam_annotate_names_0_2", context));
    varScope.addSVar("nam_get_uses_keys_0_0", new InteropSDefT(classLoader, "trans.nam_get_uses_keys_0_0", context));
    varScope.addSVar("nam_get_uses_0_0", new InteropSDefT(classLoader, "trans.nam_get_uses_0_0", context));
    varScope.addSVar("adjust_index_lookup_1_3", new InteropSDefT(classLoader, "trans.adjust_index_lookup_1_3", context));
    varScope.addSVar("nam_unique_0_0", new InteropSDefT(classLoader, "trans.nam_unique_0_0", context));
    varScope.addSVar("adjust_index_def_data_1_2", new InteropSDefT(classLoader, "trans.adjust_index_def_data_1_2", context));
    varScope.addSVar("type_of_0_0", new InteropSDefT(classLoader, "trans.type_of_0_0", context));
    varScope.addSVar("create_quoted_libraries_0_0", new InteropSDefT(classLoader, "trans.create_quoted_libraries_0_0", context));
    varScope.addSVar("write_lib_0_0", new InteropSDefT(classLoader, "trans.write_lib_0_0", context));
    varScope.addSVar("list_string_replace_0_0", new InteropSDefT(classLoader, "trans.list_string_replace_0_0", context));
    varScope.addSVar("index_split_0_0", new InteropSDefT(classLoader, "trans.index_split_0_0", context));
    varScope.addSVar("index_is_toplevel_0_0", new InteropSDefT(classLoader, "trans.index_is_toplevel_0_0", context));
    varScope.addSVar("index_is_qualifier_0_0", new InteropSDefT(classLoader, "trans.index_is_qualifier_0_0", context));
    varScope.addSVar("index_qualifier_subelements_0_0", new InteropSDefT(classLoader, "trans.index_qualifier_subelements_0_0", context));
    varScope.addSVar("index_create_qualifier_0_1", new InteropSDefT(classLoader, "trans.index_create_qualifier_0_1", context));
    varScope.addSVar("testgen_internal_file_0_0", new InteropSDefT(classLoader, "trans.testgen_internal_file_0_0", context));
    varScope.addSVar("testgen_module_name_0_0", new InteropSDefT(classLoader, "trans.testgen_module_name_0_0", context));
    varScope.addSVar("testgen_num_files_per_group_0_0", new InteropSDefT(classLoader, "trans.testgen_num_files_per_group_0_0", context));
    varScope.addSVar("testgen_num_groups_0_0", new InteropSDefT(classLoader, "trans.testgen_num_groups_0_0", context));
    varScope.addSVar("testgen_min_entities_0_0", new InteropSDefT(classLoader, "trans.testgen_min_entities_0_0", context));
    varScope.addSVar("testgen_max_entities_0_0", new InteropSDefT(classLoader, "trans.testgen_max_entities_0_0", context));
    varScope.addSVar("testgen_min_properties_0_0", new InteropSDefT(classLoader, "trans.testgen_min_properties_0_0", context));
    varScope.addSVar("testgen_max_properties_0_0", new InteropSDefT(classLoader, "trans.testgen_max_properties_0_0", context));
    varScope.addSVar("testgen_max_usertype_properties_0_0", new InteropSDefT(classLoader, "trans.testgen_max_usertype_properties_0_0", context));
    varScope.addSVar("testgen_min_functions_0_0", new InteropSDefT(classLoader, "trans.testgen_min_functions_0_0", context));
    varScope.addSVar("testgen_max_functions_0_0", new InteropSDefT(classLoader, "trans.testgen_max_functions_0_0", context));
    varScope.addSVar("testgen_min_statements_0_0", new InteropSDefT(classLoader, "trans.testgen_min_statements_0_0", context));
    varScope.addSVar("testgen_max_statements_0_0", new InteropSDefT(classLoader, "trans.testgen_max_statements_0_0", context));
    varScope.addSVar("testgen_min_aspects_0_0", new InteropSDefT(classLoader, "trans.testgen_min_aspects_0_0", context));
    varScope.addSVar("testgen_max_aspects_0_0", new InteropSDefT(classLoader, "trans.testgen_max_aspects_0_0", context));
    varScope.addSVar("testgen_min_pointcutadvices_0_0", new InteropSDefT(classLoader, "trans.testgen_min_pointcutadvices_0_0", context));
    varScope.addSVar("testgen_max_pointcutadvices_0_0", new InteropSDefT(classLoader, "trans.testgen_max_pointcutadvices_0_0", context));
    varScope.addSVar("random_int_0_2", new InteropSDefT(classLoader, "trans.random_int_0_2", context));
    varScope.addSVar("random_string_0_0", new InteropSDefT(classLoader, "trans.random_string_0_0", context));
    varScope.addSVar("random_identifier_0_0", new InteropSDefT(classLoader, "trans.random_identifier_0_0", context));
    varScope.addSVar("random_type_0_0", new InteropSDefT(classLoader, "trans.random_type_0_0", context));
    varScope.addSVar("testgen_apply_1_1", new InteropSDefT(classLoader, "trans.testgen_apply_1_1", context));
    varScope.addSVar("random_apply_1_2", new InteropSDefT(classLoader, "trans.random_apply_1_2", context));
    varScope.addSVar("random_list_item_0_0", new InteropSDefT(classLoader, "trans.random_list_item_0_0", context));
    varScope.addSVar("testgen_add_ast_0_1", new InteropSDefT(classLoader, "trans.testgen_add_ast_0_1", context));
    varScope.addSVar("testgen_write_file_0_1", new InteropSDefT(classLoader, "trans.testgen_write_file_0_1", context));
    varScope.addSVar("testgen_0_0", new InteropSDefT(classLoader, "trans.testgen_0_0", context));
    varScope.addSVar("testgen_group_0_0", new InteropSDefT(classLoader, "trans.testgen_group_0_0", context));
    varScope.addSVar("testgen_file_0_0", new InteropSDefT(classLoader, "trans.testgen_file_0_0", context));
    varScope.addSVar("testgen_module_0_0", new InteropSDefT(classLoader, "trans.testgen_module_0_0", context));
    varScope.addSVar("testgen_entity_0_0", new InteropSDefT(classLoader, "trans.testgen_entity_0_0", context));
    varScope.addSVar("testgen_property_0_0", new InteropSDefT(classLoader, "trans.testgen_property_0_0", context));
    varScope.addSVar("testgen_function_0_1", new InteropSDefT(classLoader, "trans.testgen_function_0_1", context));
    varScope.addSVar("testgen_statement_0_1", new InteropSDefT(classLoader, "trans.testgen_statement_0_1", context));
    varScope.addSVar("testgen_expression_0_1", new InteropSDefT(classLoader, "trans.testgen_expression_0_1", context));
    varScope.addSVar("testgen_aspect_0_0", new InteropSDefT(classLoader, "trans.testgen_aspect_0_0", context));
    varScope.addSVar("testgen_pointcutadvice_0_0", new InteropSDefT(classLoader, "trans.testgen_pointcutadvice_0_0", context));
    varScope.addSVar("index_compile_ast_0_2", new InteropSDefT(classLoader, "trans.index_compile_ast_0_2", context));
    varScope.addSVar("to_java_0_0_fragment_1", new InteropSDefT(classLoader, "trans.to_java_0_0_fragment_1", context));
    varScope.addSVar("to_java_0_0_fragment_0", new InteropSDefT(classLoader, "trans.to_java_0_0_fragment_0", context));
    varScope.addSVar("to_java_0_0", new InteropSDefT(classLoader, "trans.to_java_0_0", context));
    varScope.addSVar("params_to_java_0_0", new InteropSDefT(classLoader, "trans.params_to_java_0_0", context));
    varScope.addSVar("params_to_java2_0_0", new InteropSDefT(classLoader, "trans.params_to_java2_0_0", context));
    varScope.addSVar("to_java_fixadvice_0_1", new InteropSDefT(classLoader, "trans.to_java_fixadvice_0_1", context));
    varScope.addSVar("to_java_aspect_replace_var_0_2", new InteropSDefT(classLoader, "trans.to_java_aspect_replace_var_0_2", context));
    varScope.addSVar("to_java_aspect_type_0_0", new InteropSDefT(classLoader, "trans.to_java_aspect_type_0_0", context));
    varScope.addSVar("is_assignable_to_0_0", new InteropSDefT(classLoader, "trans.is_assignable_to_0_0", context));
    varScope.addSVar("print_type_0_0", new InteropSDefT(classLoader, "trans.print_type_0_0", context));
    varScope.addSVar("primitive_types_0_0", new InteropSDefT(classLoader, "trans.primitive_types_0_0", context));
    varScope.addSVar("is_primitive_type_0_0", new InteropSDefT(classLoader, "trans.is_primitive_type_0_0", context));
    varScope.addSVar("constraint_error_0_0", new InteropSDefT(classLoader, "trans.constraint_error_0_0", context));
    varScope.addSVar("constraint_warning_0_0", new InteropSDefT(classLoader, "trans.constraint_warning_0_0", context));
    varScope.addSVar("constraint_note_0_0", new InteropSDefT(classLoader, "trans.constraint_note_0_0", context));
    varScope.addSVar("import_transitive_0_0", new InteropSDefT(classLoader, "trans.import_transitive_0_0", context));
    varScope.addSVar("import_standard_0_0", new InteropSDefT(classLoader, "trans.import_standard_0_0", context));
    varScope.addSVar("import_values_0_2", new InteropSDefT(classLoader, "trans.import_values_0_2", context));
    varScope.addSVar("import_currentfile_values_0_1", new InteropSDefT(classLoader, "trans.import_currentfile_values_0_1", context));
    varScope.addSVar("adjust_index_import_0_2", new InteropSDefT(classLoader, "trans.adjust_index_import_0_2", context));
    varScope.addSVar("import_defs_0_2", new InteropSDefT(classLoader, "trans.import_defs_0_2", context));
    varScope.addSVar("index_diff_constructors_0_0", new InteropSDefT(classLoader, "trans.index_diff_constructors_0_0", context));
    varScope.addSVar("index_diff_compare_0_0", new InteropSDefT(classLoader, "trans.index_diff_compare_0_0", context));
    varScope.addSVar("index_lookup_typed_0_1", new InteropSDefT(classLoader, "trans.index_lookup_typed_0_1", context));
    varScope.addSVar("index_lookup_all_typed_0_2", new InteropSDefT(classLoader, "trans.index_lookup_all_typed_0_2", context));
    varScope.addSVar("index_compare_nametype_equal_0_2", new InteropSDefT(classLoader, "trans.index_compare_nametype_equal_0_2", context));
    varScope.addSVar("index_compare_nametype_substring_0_2", new InteropSDefT(classLoader, "trans.index_compare_nametype_substring_0_2", context));
    varScope.addSVar("nbl_get_type_0_0", new InteropSDefT(classLoader, "trans.nbl_get_type_0_0", context));
    varScope.addSVar("nbl_type_eq_0_1", new InteropSDefT(classLoader, "trans.nbl_type_eq_0_1", context));
    varScope.addSVar("index_desugar_ast_0_0", new InteropSDefT(classLoader, "trans.index_desugar_ast_0_0", context));
    varScope.addSVar("index_is_partial_ast_0_0", new InteropSDefT(classLoader, "trans.index_is_partial_ast_0_0", context));
    varScope.addSVar("index_combine_asts_0_0", new InteropSDefT(classLoader, "trans.index_combine_asts_0_0", context));
    varScope.addSVar("index_schedule_compilation_0_0", new InteropSDefT(classLoader, "trans.index_schedule_compilation_0_0", context));
    varScope.addSVar("index_compilation_0_0", new InteropSDefT(classLoader, "trans.index_compilation_0_0", context));
    varScope.addSVar("index_split_partial_files_0_0", new InteropSDefT(classLoader, "trans.index_split_partial_files_0_0", context));
    varScope.addSVar("index_compilation_file_0_1", new InteropSDefT(classLoader, "trans.index_compilation_file_0_1", context));
    varScope.addSVar("index_compilation_partial_file_0_1", new InteropSDefT(classLoader, "trans.index_compilation_partial_file_0_1", context));
    varScope.addSVar("index_compilation_ast_0_2", new InteropSDefT(classLoader, "trans.index_compilation_ast_0_2", context));
    varScope.addSVar("index_compilation_filter_file_0_0", new InteropSDefT(classLoader, "trans.index_compilation_filter_file_0_0", context));
    varScope.addSVar("commit_and_compile_0_0", new InteropSDefT(classLoader, "trans.commit_and_compile_0_0", context));
    varScope.addSVar("trigger_commit_and_compile_0_0", new InteropSDefT(classLoader, "trans.trigger_commit_and_compile_0_0", context));
    varScope.addSVar("disable_commit_and_compile_0_0", new InteropSDefT(classLoader, "trans.disable_commit_and_compile_0_0", context));
    varScope.addSVar("enable_commit_and_compile_0_0", new InteropSDefT(classLoader, "trans.enable_commit_and_compile_0_0", context));
    varScope.addSVar("index_compilation_restore_read_file_0_0", new InteropSDefT(classLoader, "trans.index_compilation_restore_read_file_0_0", context));
    varScope.addSVar("index_compilation_clean_reads_0_0", new InteropSDefT(classLoader, "trans.index_compilation_clean_reads_0_0", context));
    varScope.addSVar("index_compilation_file_tuple_0_0", new InteropSDefT(classLoader, "trans.index_compilation_file_tuple_0_0", context));
    varScope.addSVar("index_compilation_read_path_0_0", new InteropSDefT(classLoader, "trans.index_compilation_read_path_0_0", context));
    varScope.addSVar("index_file_is_partial_0_0", new InteropSDefT(classLoader, "trans.index_file_is_partial_0_0", context));
    varScope.addSVar("analyze_top_internal_0_4", new InteropSDefT(classLoader, "trans.analyze_top_internal_0_4", context));
    varScope.addSVar("analyze_top_defs_0_0", new InteropSDefT(classLoader, "trans.analyze_top_defs_0_0", context));
    varScope.addSVar("analyze_top_data_0_2", new InteropSDefT(classLoader, "trans.analyze_top_data_0_2", context));
    varScope.addSVar("analyze_top_uses_0_2", new InteropSDefT(classLoader, "trans.analyze_top_uses_0_2", context));
    varScope.addSVar("analyze_top_store_ast_0_2", new InteropSDefT(classLoader, "trans.analyze_top_store_ast_0_2", context));
    varScope.addSVar("analyze_defs_0_0", new InteropSDefT(classLoader, "trans.analyze_defs_0_0", context));
    varScope.addSVar("analyze_defs_0_4", new InteropSDefT(classLoader, "trans.analyze_defs_0_4", context));
    varScope.addSVar("analyze_child_defs_0_4", new InteropSDefT(classLoader, "trans.analyze_child_defs_0_4", context));
    varScope.addSVar("construct_index_path_0_5", new InteropSDefT(classLoader, "trans.construct_index_path_0_5", context));
    varScope.addSVar("update_index_paths_0_1", new InteropSDefT(classLoader, "trans.update_index_paths_0_1", context));
    varScope.addSVar("lookup_index_path_0_0", new InteropSDefT(classLoader, "trans.lookup_index_path_0_0", context));
    varScope.addSVar("index_do_adjust_path_0_3", new InteropSDefT(classLoader, "trans.index_do_adjust_path_0_3", context));
    varScope.addSVar("analyze_uses_0_0", new InteropSDefT(classLoader, "trans.analyze_uses_0_0", context));
    varScope.addSVar("analyze_tree_data_0_0", new InteropSDefT(classLoader, "trans.analyze_tree_data_0_0", context));
    varScope.addSVar("analyze_tree_data_part_0_1", new InteropSDefT(classLoader, "trans.analyze_tree_data_part_0_1", context));
    varScope.addSVar("store_index_data_results_0_1", new InteropSDefT(classLoader, "trans.store_index_data_results_0_1", context));
    varScope.addSVar("index_parallel_analyze_1_0", new InteropSDefT(classLoader, "trans.index_parallel_analyze_1_0", context));
    varScope.addSVar("index_sequential_analyze_1_0", new InteropSDefT(classLoader, "trans.index_sequential_analyze_1_0", context));
    varScope.addSVar("index_analyze_1_0", new InteropSDefT(classLoader, "trans.index_analyze_1_0", context));
    varScope.addSVar("index_parse_file_0_0", new InteropSDefT(classLoader, "trans.index_parse_file_0_0", context));
    varScope.addSVar("index_set_markers_0_0", new InteropSDefT(classLoader, "trans.index_set_markers_0_0", context));
    varScope.addSVar("index_do_analysis_1_0", new InteropSDefT(classLoader, "trans.index_do_analysis_1_0", context));
    varScope.addSVar("index_toplevel_split_0_0", new InteropSDefT(classLoader, "trans.index_toplevel_split_0_0", context));
    varScope.addSVar("index_toplevel_split_internal_0_0", new InteropSDefT(classLoader, "trans.index_toplevel_split_internal_0_0", context));
    varScope.addSVar("index_transform_qualifier_0_1", new InteropSDefT(classLoader, "trans.index_transform_qualifier_0_1", context));
    varScope.addSVar("analyze_diff_0_0", new InteropSDefT(classLoader, "trans.analyze_diff_0_0", context));
    varScope.addSVar("analyze_store_diff_0_2", new InteropSDefT(classLoader, "trans.analyze_store_diff_0_2", context));
    varScope.addSVar("analyze_astdiff_0_0", new InteropSDefT(classLoader, "trans.analyze_astdiff_0_0", context));
    varScope.addSVar("analyze_add_compilediff_0_0", new InteropSDefT(classLoader, "trans.analyze_add_compilediff_0_0", context));
    varScope.addSVar("analyze_get_compilediffs_0_0", new InteropSDefT(classLoader, "trans.analyze_get_compilediffs_0_0", context));
    varScope.addSVar("index_lookup_internal_4_3", new InteropSDefT(classLoader, "trans.index_lookup_internal_4_3", context));
    varScope.addSVar("index_lookup_internal_2_3", new InteropSDefT(classLoader, "trans.index_lookup_internal_2_3", context));
    varScope.addSVar("index_lookup_all_internal_4_3", new InteropSDefT(classLoader, "trans.index_lookup_all_internal_4_3", context));
    varScope.addSVar("index_lookup_all_internal_2_3", new InteropSDefT(classLoader, "trans.index_lookup_all_internal_2_3", context));
    varScope.addSVar("index_lookup_all_scoped_internal_4_3", new InteropSDefT(classLoader, "trans.index_lookup_all_scoped_internal_4_3", context));
    varScope.addSVar("index_lookup_all_scoped_internal_2_3", new InteropSDefT(classLoader, "trans.index_lookup_all_scoped_internal_2_3", context));
    varScope.addSVar("index_do_adjust_import_0_2", new InteropSDefT(classLoader, "trans.index_do_adjust_import_0_2", context));
    varScope.addSVar("index_get_adjust_import_results_3_2", new InteropSDefT(classLoader, "trans.index_get_adjust_import_results_3_2", context));
    varScope.addSVar("index_adjust_import_recurse_3_2", new InteropSDefT(classLoader, "trans.index_adjust_import_recurse_3_2", context));
    varScope.addSVar("index_do_adjust_lookup_0_4", new InteropSDefT(classLoader, "trans.index_do_adjust_lookup_0_4", context));
    varScope.addSVar("index_get_adjust_lookup_results_3_2", new InteropSDefT(classLoader, "trans.index_get_adjust_lookup_results_3_2", context));
    varScope.addSVar("index_get_defs_1_2", new InteropSDefT(classLoader, "trans.index_get_defs_1_2", context));
    varScope.addSVar("index_get_defs_prefix_1_2", new InteropSDefT(classLoader, "trans.index_get_defs_prefix_1_2", context));
    varScope.addSVar("index_compare_name_equal_0_1", new InteropSDefT(classLoader, "trans.index_compare_name_equal_0_1", context));
    varScope.addSVar("index_compare_name_substring_0_1", new InteropSDefT(classLoader, "trans.index_compare_name_substring_0_1", context));
    varScope.addSVar("index_compare_name_substring_0_2", new InteropSDefT(classLoader, "trans.index_compare_name_substring_0_2", context));
    varScope.addSVar("index_uri_impl_0_0", new InteropSDefT(classLoader, "trans.index_uri_impl_0_0", context));
    varScope.addSVar("index_value_impl_0_0", new InteropSDefT(classLoader, "trans.index_value_impl_0_0", context));
    varScope.addSVar("unzip_analyzed_0_0", new InteropSDefT(classLoader, "trans.unzip_analyzed_0_0", context));
    varScope.addSVar("is_test_file_0_0", new InteropSDefT(classLoader, "trans.is_test_file_0_0", context));
    varScope.addSVar("is_test_language_0_0", new InteropSDefT(classLoader, "trans.is_test_language_0_0", context));
    varScope.addSVar("is_test_input_0_2", new InteropSDefT(classLoader, "trans.is_test_input_0_2", context));
    varScope.addSVar("fake_file_0_0", new InteropSDefT(classLoader, "trans.fake_file_0_0", context));
    varScope.addSVar("ast_uri_to_ast_file_0_1", new InteropSDefT(classLoader, "trans.ast_uri_to_ast_file_0_1", context));
    varScope.addSVar("index_readwildcard_substring_0_1", new InteropSDefT(classLoader, "trans.index_readwildcard_substring_0_1", context));
    varScope.addSVar("store_wildcard_read_0_3", new InteropSDefT(classLoader, "trans.store_wildcard_read_0_3", context));
    varScope.addSVar("index_is_unresolved_0_2", new InteropSDefT(classLoader, "trans.index_is_unresolved_0_2", context));
    varScope.addSVar("index_add_unresolved_0_2", new InteropSDefT(classLoader, "trans.index_add_unresolved_0_2", context));
    varScope.addSVar("index_file_dependent_construct_0_0", new InteropSDefT(classLoader, "trans.index_file_dependent_construct_0_0", context));
    varScope.addSVar("index_file_dependency_filter_0_0", new InteropSDefT(classLoader, "trans.index_file_dependency_filter_0_0", context));
    varScope.addSVar("index_eq_0_2", new InteropSDefT(classLoader, "trans.index_eq_0_2", context));
    varScope.addSVar("index_key_unwrap_0_0", new InteropSDefT(classLoader, "trans.index_key_unwrap_0_0", context));
    varScope.addSVar("nam_get_def_0_2", new InteropSDefT(classLoader, "trans.nam_get_def_0_2", context));
    varScope.addSVar("nam_annotate_def_0_1", new InteropSDefT(classLoader, "trans.nam_annotate_def_0_1", context));
    varScope.addSVar("nam_annotate_use_0_2", new InteropSDefT(classLoader, "trans.nam_annotate_use_0_2", context));
    varScope.addSVar("nam_annotate_use_0_4", new InteropSDefT(classLoader, "trans.nam_annotate_use_0_4", context));
    varScope.addSVar("nam_annotate_scope_0_1", new InteropSDefT(classLoader, "trans.nam_annotate_scope_0_1", context));
    varScope.addSVar("nam_ordered_def_0_0", new InteropSDefT(classLoader, "trans.nam_ordered_def_0_0", context));
    varScope.addSVar("nam_get_definition_0_0", new InteropSDefT(classLoader, "trans.nam_get_definition_0_0", context));
    varScope.addSVar("nam_get_definition_key_0_0", new InteropSDefT(classLoader, "trans.nam_get_definition_key_0_0", context));
    varScope.addSVar("nam_get_use_0_0", new InteropSDefT(classLoader, "trans.nam_get_use_0_0", context));
    varScope.addSVar("nam_get_use_key_0_0", new InteropSDefT(classLoader, "trans.nam_get_use_key_0_0", context));
    varScope.addSVar("nam_annotate_scopes_0_1", new InteropSDefT(classLoader, "trans.nam_annotate_scopes_0_1", context));
    varScope.addSVar("adjust_index_path_1_2", new InteropSDefT(classLoader, "trans.adjust_index_path_1_2", context));
    varScope.addSVar("analyze_top_0_1", new InteropSDefT(classLoader, "trans.analyze_top_0_1", context));
    varScope.addSVar("analyze_top_0_4", new InteropSDefT(classLoader, "trans.analyze_top_0_4", context));
    varScope.addSVar("index_parallel_analyze_files_1_0", new InteropSDefT(classLoader, "trans.index_parallel_analyze_files_1_0", context));
    varScope.addSVar("index_sequential_analyze_files_1_0", new InteropSDefT(classLoader, "trans.index_sequential_analyze_files_1_0", context));
    varScope.addSVar("index_analyze_files_1_0", new InteropSDefT(classLoader, "trans.index_analyze_files_1_0", context));
    varScope.addSVar("index_merge_ast_0_1", new InteropSDefT(classLoader, "trans.index_merge_ast_0_1", context));
    varScope.addSVar("index_get_data_0_1", new InteropSDefT(classLoader, "trans.index_get_data_0_1", context));
    varScope.addSVar("index_get_data_all_0_1", new InteropSDefT(classLoader, "trans.index_get_data_all_0_1", context));
    varScope.addSVar("index_get_use_0_0", new InteropSDefT(classLoader, "trans.index_get_use_0_0", context));
    varScope.addSVar("index_get_uses_all_0_0", new InteropSDefT(classLoader, "trans.index_get_uses_all_0_0", context));
    varScope.addSVar("index_get_reads_all_0_0", new InteropSDefT(classLoader, "trans.index_get_reads_all_0_0", context));
    varScope.addSVar("index_get_all_0_0", new InteropSDefT(classLoader, "trans.index_get_all_0_0", context));
    varScope.addSVar("index_get_all_values_0_0", new InteropSDefT(classLoader, "trans.index_get_all_values_0_0", context));
    varScope.addSVar("index_get_0_0", new InteropSDefT(classLoader, "trans.index_get_0_0", context));
    varScope.addSVar("index_get_value_0_0", new InteropSDefT(classLoader, "trans.index_get_value_0_0", context));
    varScope.addSVar("index_get_children_0_1", new InteropSDefT(classLoader, "trans.index_get_children_0_1", context));
    varScope.addSVar("index_get_children_2_1", new InteropSDefT(classLoader, "trans.index_get_children_2_1", context));
    varScope.addSVar("index_get_children_0_2", new InteropSDefT(classLoader, "trans.index_get_children_0_2", context));
    varScope.addSVar("index_get_children_2_2", new InteropSDefT(classLoader, "trans.index_get_children_2_2", context));
    varScope.addSVar("index_get_referenced_files_1_0", new InteropSDefT(classLoader, "trans.index_get_referenced_files_1_0", context));
    varScope.addSVar("index_get_dependent_files_0_0", new InteropSDefT(classLoader, "trans.index_get_dependent_files_0_0", context));
    varScope.addSVar("index_lookup_0_0", new InteropSDefT(classLoader, "trans.index_lookup_0_0", context));
    varScope.addSVar("index_lookup_all_0_0", new InteropSDefT(classLoader, "trans.index_lookup_all_0_0", context));
    varScope.addSVar("index_lookup_all_0_1", new InteropSDefT(classLoader, "trans.index_lookup_all_0_1", context));
    varScope.addSVar("index_lookup_all_scoped_0_0", new InteropSDefT(classLoader, "trans.index_lookup_all_scoped_0_0", context));
    varScope.addSVar("index_lookup_all_scoped_noimports_0_0", new InteropSDefT(classLoader, "trans.index_lookup_all_scoped_noimports_0_0", context));
    varScope.addSVar("index_lookup_all_scoped_0_1", new InteropSDefT(classLoader, "trans.index_lookup_all_scoped_0_1", context));
    varScope.addSVar("index_lookup_children_0_1", new InteropSDefT(classLoader, "trans.index_lookup_children_0_1", context));
    varScope.addSVar("index_lookup_children_0_2", new InteropSDefT(classLoader, "trans.index_lookup_children_0_2", context));
    varScope.addSVar("index_uri_namespace_0_0", new InteropSDefT(classLoader, "trans.index_uri_namespace_0_0", context));
    varScope.addSVar("index_uri_path_0_0", new InteropSDefT(classLoader, "trans.index_uri_path_0_0", context));
    varScope.addSVar("index_uri_name_0_0", new InteropSDefT(classLoader, "trans.index_uri_name_0_0", context));
    varScope.addSVar("index_is_definition_0_0", new InteropSDefT(classLoader, "trans.index_is_definition_0_0", context));
    varScope.addSVar("index_key_eq_0_0", new InteropSDefT(classLoader, "trans.index_key_eq_0_0", context));
    varScope.addSVar("index_filepairs_to_files_0_0", new InteropSDefT(classLoader, "trans.index_filepairs_to_files_0_0", context));
    varScope.addSVar("index_setup_0_2", new InteropSDefT(classLoader, "trans.index_setup_0_2", context));
    varScope.addSVar("index_setup_0_3", new InteropSDefT(classLoader, "trans.index_setup_0_3", context));
    varScope.addSVar("index_set_current_file_0_0", new InteropSDefT(classLoader, "trans.index_set_current_file_0_0", context));
    varScope.addSVar("index_add_0_1", new InteropSDefT(classLoader, "trans.index_add_0_1", context));
    varScope.addSVar("index_add_all_0_1", new InteropSDefT(classLoader, "trans.index_add_all_0_1", context));
    varScope.addSVar("index_remove_0_1", new InteropSDefT(classLoader, "trans.index_remove_0_1", context));
    varScope.addSVar("index_remove_all_0_1", new InteropSDefT(classLoader, "trans.index_remove_all_0_1", context));
    varScope.addSVar("index_clear_file_0_0", new InteropSDefT(classLoader, "trans.index_clear_file_0_0", context));
    varScope.addSVar("index_clear_0_0", new InteropSDefT(classLoader, "trans.index_clear_0_0", context));
    varScope.addSVar("index_reload_0_0", new InteropSDefT(classLoader, "trans.index_reload_0_0", context));
    varScope.addSVar("index_commit_0_0", new InteropSDefT(classLoader, "trans.index_commit_0_0", context));
    varScope.addSVar("index_start_transaction_0_0", new InteropSDefT(classLoader, "trans.index_start_transaction_0_0", context));
    varScope.addSVar("index_end_transaction_0_0", new InteropSDefT(classLoader, "trans.index_end_transaction_0_0", context));
    varScope.addSVar("index_transaction_1_0", new InteropSDefT(classLoader, "trans.index_transaction_1_0", context));
    varScope.addSVar("index_get_current_file_0_0", new InteropSDefT(classLoader, "trans.index_get_current_file_0_0", context));
    varScope.addSVar("index_get_all_files_0_0", new InteropSDefT(classLoader, "trans.index_get_all_files_0_0", context));
    varScope.addSVar("index_get_all_in_file_0_0", new InteropSDefT(classLoader, "trans.index_get_all_in_file_0_0", context));
    varScope.addSVar("index_get_all_in_file_0_1", new InteropSDefT(classLoader, "trans.index_get_all_in_file_0_1", context));
    varScope.addSVar("index_get_file_revision_0_0", new InteropSDefT(classLoader, "trans.index_get_file_revision_0_0", context));
    varScope.addSVar("index_get_files_of_0_0", new InteropSDefT(classLoader, "trans.index_get_files_of_0_0", context));
    varScope.addSVar("indexlib_get_all_0_0", new InteropSDefT(classLoader, "trans.indexlib_get_all_0_0", context));
    varScope.addSVar("indexlib_get_all_values_0_0", new InteropSDefT(classLoader, "trans.indexlib_get_all_values_0_0", context));
    varScope.addSVar("indexlib_get_0_0", new InteropSDefT(classLoader, "trans.indexlib_get_0_0", context));
    varScope.addSVar("indexlib_get_value_0_0", new InteropSDefT(classLoader, "trans.indexlib_get_value_0_0", context));
    varScope.addSVar("index_globals_path_0_0", new InteropSDefT(classLoader, "trans.index_globals_path_0_0", context));
    varScope.addSVar("index_globals_uri_0_0", new InteropSDefT(classLoader, "trans.index_globals_uri_0_0", context));
    varScope.addSVar("index_get_global_0_1", new InteropSDefT(classLoader, "trans.index_get_global_0_1", context));
    varScope.addSVar("index_get_all_globals_0_1", new InteropSDefT(classLoader, "trans.index_get_all_globals_0_1", context));
    varScope.addSVar("index_add_global_0_1", new InteropSDefT(classLoader, "trans.index_add_global_0_1", context));
    varScope.addSVar("index_set_global_0_1", new InteropSDefT(classLoader, "trans.index_set_global_0_1", context));
    varScope.addSVar("index_clear_global_0_1", new InteropSDefT(classLoader, "trans.index_clear_global_0_1", context));
    varScope.addSVar("index_boolean_globals_uri_0_0", new InteropSDefT(classLoader, "trans.index_boolean_globals_uri_0_0", context));
    varScope.addSVar("index_enable_global_0_1", new InteropSDefT(classLoader, "trans.index_enable_global_0_1", context));
    varScope.addSVar("index_disable_global_0_1", new InteropSDefT(classLoader, "trans.index_disable_global_0_1", context));
    varScope.addSVar("index_is_global_enabled_0_1", new InteropSDefT(classLoader, "trans.index_is_global_enabled_0_1", context));
    varScope.addSVar("index_uri_0_0", new InteropSDefT(classLoader, "trans.index_uri_0_0", context));
    varScope.addSVar("index_uri_parent_0_0", new InteropSDefT(classLoader, "trans.index_uri_parent_0_0", context));
    varScope.addSVar("index_value_0_0", new InteropSDefT(classLoader, "trans.index_value_0_0", context));
    varScope.addSVar("index_is_fake_file_0_0", new InteropSDefT(classLoader, "trans.index_is_fake_file_0_0", context));
    varScope.addSVar("index_uri_eq_0_0", new InteropSDefT(classLoader, "trans.index_uri_eq_0_0", context));
    varScope.addSVar("index_find_key_0_0", new InteropSDefT(classLoader, "trans.index_find_key_0_0", context));
    varScope.addSVar("index_path_to_string_0_0", new InteropSDefT(classLoader, "trans.index_path_to_string_0_0", context));
    varScope.addSVar("index_uri_to_string_0_0", new InteropSDefT(classLoader, "trans.index_uri_to_string_0_0", context));
    varScope.addSVar("index_file_to_string_0_0", new InteropSDefT(classLoader, "trans.index_file_to_string_0_0", context));
    varScope.addSVar("index_file_to_uri_0_0", new InteropSDefT(classLoader, "trans.index_file_to_uri_0_0", context));
    varScope.addSVar("index_uri_generic_0_0", new InteropSDefT(classLoader, "trans.index_uri_generic_0_0", context));
    varScope.addSVar("index_value_generic_0_0", new InteropSDefT(classLoader, "trans.index_value_generic_0_0", context));
    varScope.addSVar("index_namespace_unwrap_0_0", new InteropSDefT(classLoader, "trans.index_namespace_unwrap_0_0", context));
    varScope.addSVar("index_uri_unwrap_0_0", new InteropSDefT(classLoader, "trans.index_uri_unwrap_0_0", context));
    varScope.addSVar("parse_file_0_0", new InteropSDefT(classLoader, "trans.parse_file_0_0", context));
    varScope.addSVar("parse_entitywithaspects_file_0_0", new InteropSDefT(classLoader, "trans.parse_entitywithaspects_file_0_0", context));
    varScope.addSVar("parse_string_0_0", new InteropSDefT(classLoader, "trans.parse_string_0_0", context));
    varScope.addSVar("parse_entitywithaspects_string_0_0", new InteropSDefT(classLoader, "trans.parse_entitywithaspects_string_0_0", context));
    varScope.addSVar("parse_stream_0_0", new InteropSDefT(classLoader, "trans.parse_stream_0_0", context));
    varScope.addSVar("parse_entitywithaspects_stream_0_0", new InteropSDefT(classLoader, "trans.parse_entitywithaspects_stream_0_0", context));
    varScope.addSVar("pp_entitywithaspects_string_0_0", new InteropSDefT(classLoader, "trans.pp_entitywithaspects_string_0_0", context));
    varScope.addSVar("language_0_0", new InteropSDefT(classLoader, "trans.language_0_0", context));
    varScope.addSVar("open_import_3_0", new InteropSDefT(classLoader, "trans.open_import_3_0", context));
    varScope.addSVar("open_wildcard_import_4_0", new InteropSDefT(classLoader, "trans.open_wildcard_import_4_0", context));
    varScope.addSVar("import_cache_path_0_0", new InteropSDefT(classLoader, "trans.import_cache_path_0_0", context));
    varScope.addSVar("project_path_0_0", new InteropSDefT(classLoader, "trans.project_path_0_0", context));
    varScope.addSVar("plugin_path_0_0", new InteropSDefT(classLoader, "trans.plugin_path_0_0", context));
    varScope.addSVar("candidate_sorts_0_0", new InteropSDefT(classLoader, "trans.candidate_sorts_0_0", context));
    varScope.addSVar("is_newer_0_0", new InteropSDefT(classLoader, "trans.is_newer_0_0", context));
    varScope.addSVar("editor_init_0_0", new InteropSDefT(classLoader, "trans.editor_init_0_0", context));
    varScope.addSVar("refresh_workspace_file_0_0", new InteropSDefT(classLoader, "trans.refresh_workspace_file_0_0", context));
    varScope.addSVar("string_starts_with_capital_0_0", new InteropSDefT(classLoader, "trans.string_starts_with_capital_0_0", context));
    varScope.addSVar("origin_term_0_0", new InteropSDefT(classLoader, "trans.origin_term_0_0", context));
    varScope.addSVar("origin_text_0_0", new InteropSDefT(classLoader, "trans.origin_text_0_0", context));
    varScope.addSVar("origin_offset_0_0", new InteropSDefT(classLoader, "trans.origin_offset_0_0", context));
    varScope.addSVar("origin_location_0_0", new InteropSDefT(classLoader, "trans.origin_location_0_0", context));
    varScope.addSVar("origin_line_0_0", new InteropSDefT(classLoader, "trans.origin_line_0_0", context));
    varScope.addSVar("origin_column_0_0", new InteropSDefT(classLoader, "trans.origin_column_0_0", context));
    varScope.addSVar("origin_file_0_0", new InteropSDefT(classLoader, "trans.origin_file_0_0", context));
    varScope.addSVar("origin_strip_0_0", new InteropSDefT(classLoader, "trans.origin_strip_0_0", context));
    varScope.addSVar("origin_equal_0_1", new InteropSDefT(classLoader, "trans.origin_equal_0_1", context));
    varScope.addSVar("origin_language_description_0_0", new InteropSDefT(classLoader, "trans.origin_language_description_0_0", context));
    varScope.addSVar("origin_language_0_0", new InteropSDefT(classLoader, "trans.origin_language_0_0", context));
    varScope.addSVar("origin_surrounding_comments_0_0", new InteropSDefT(classLoader, "trans.origin_surrounding_comments_0_0", context));
    varScope.addSVar("origin_documentation_comment_0_0", new InteropSDefT(classLoader, "trans.origin_documentation_comment_0_0", context));
    varScope.addSVar("documentation_comment_chars_0_0", new InteropSDefT(classLoader, "trans.documentation_comment_chars_0_0", context));
    varScope.addSVar("origin_track_forced_1_0", new InteropSDefT(classLoader, "trans.origin_track_forced_1_0", context));
    varScope.addSVar("origin_relative_path_0_0", new InteropSDefT(classLoader, "trans.origin_relative_path_0_0", context));
    varScope.addSVar("desugar_position_1_1", new InteropSDefT(classLoader, "trans.desugar_position_1_1", context));
    varScope.addSVar("at_position_1_1", new InteropSDefT(classLoader, "trans.at_position_1_1", context));
    varScope.addSVar("position_of_term_1_0", new InteropSDefT(classLoader, "trans.position_of_term_1_0", context));
    varScope.addSVar("position_of_term_1_1", new InteropSDefT(classLoader, "trans.position_of_term_1_1", context));
    varScope.addSVar("term_at_position_0_1", new InteropSDefT(classLoader, "trans.term_at_position_0_1", context));
    varScope.addSVar("parent_at_position_0_1", new InteropSDefT(classLoader, "trans.parent_at_position_0_1", context));
    varScope.addSVar("subterm_at_0_1", new InteropSDefT(classLoader, "trans.subterm_at_0_1", context));
    varScope.addSVar("set_markers_0_1", new InteropSDefT(classLoader, "trans.set_markers_0_1", context));
    varScope.addSVar("queue_analysis_0_0", new InteropSDefT(classLoader, "trans.queue_analysis_0_0", context));
    varScope.addSVar("analysis_count_0_0", new InteropSDefT(classLoader, "trans.analysis_count_0_0", context));
    varScope.addSVar("set_total_work_units_0_0", new InteropSDefT(classLoader, "trans.set_total_work_units_0_0", context));
    varScope.addSVar("complete_work_unit_0_0", new InteropSDefT(classLoader, "trans.complete_work_unit_0_0", context));
    varScope.addSVar("queue_strategy_0_2", new InteropSDefT(classLoader, "trans.queue_strategy_0_2", context));
    varScope.addSVar("set_analysis_backgrounded_0_0", new InteropSDefT(classLoader, "trans.set_analysis_backgrounded_0_0", context));
    varScope.addSVar("analyze_0_0", new InteropSDefT(classLoader, "trans.analyze_0_0", context));
    varScope.addSVar("editor_analyze_0_0", new InteropSDefT(classLoader, "trans.editor_analyze_0_0", context));
    varScope.addSVar("editor_save_0_0", new InteropSDefT(classLoader, "trans.editor_save_0_0", context));
    varScope.addSVar("editor_resolve_0_0", new InteropSDefT(classLoader, "trans.editor_resolve_0_0", context));
    varScope.addSVar("editor_hover_0_0", new InteropSDefT(classLoader, "trans.editor_hover_0_0", context));
    varScope.addSVar("editor_complete_0_0", new InteropSDefT(classLoader, "trans.editor_complete_0_0", context));
    varScope.addSVar("debug_generate_aterm_0_0", new InteropSDefT(classLoader, "trans.debug_generate_aterm_0_0", context));
    varScope.addSVar("debug_generate_deffed_0_0", new InteropSDefT(classLoader, "trans.debug_generate_deffed_0_0", context));
    varScope.addSVar("debug_generate_analyzed_0_0", new InteropSDefT(classLoader, "trans.debug_generate_analyzed_0_0", context));
    varScope.addSVar("debug_index_show_current_file_0_0", new InteropSDefT(classLoader, "trans.debug_index_show_current_file_0_0", context));
    varScope.addSVar("debug_index_show_all_files_0_0", new InteropSDefT(classLoader, "trans.debug_index_show_all_files_0_0", context));
    varScope.addSVar("debug_index_clear_current_0_0", new InteropSDefT(classLoader, "trans.debug_index_clear_current_0_0", context));
    varScope.addSVar("debug_index_clear_0_0", new InteropSDefT(classLoader, "trans.debug_index_clear_0_0", context));
    varScope.addSVar("debug_index_reload_0_0", new InteropSDefT(classLoader, "trans.debug_index_reload_0_0", context));
    varScope.addSVar("generate_test_files_0_0", new InteropSDefT(classLoader, "trans.generate_test_files_0_0", context));
    varScope.addSVar("editor_queue_analysis_0_0", new InteropSDefT(classLoader, "trans.editor_queue_analysis_0_0", context));
    varScope.addSVar("editor_parallel_analyze_0_0", new InteropSDefT(classLoader, "trans.editor_parallel_analyze_0_0", context));
    varScope.addSVar("editor_sequential_analyze_0_0", new InteropSDefT(classLoader, "trans.editor_sequential_analyze_0_0", context));
    varScope.addSVar("Type_0_0", new InteropSDefT(classLoader, "trans.$Type_0_0", context));
    varScope.addSVar("Import_0_0", new InteropSDefT(classLoader, "trans.$Import_0_0", context));
    varScope.addSVar("Transitive_0_0", new InteropSDefT(classLoader, "trans.$Transitive_0_0", context));
    varScope.addSVar("CurrentFile_0_0", new InteropSDefT(classLoader, "trans.$Current$File_0_0", context));
    varScope.addSVar("Module_0_0", new InteropSDefT(classLoader, "trans.$Module_0_0", context));
    varScope.addSVar("Aspect_0_0", new InteropSDefT(classLoader, "trans.$Aspect_0_0", context));
    varScope.addSVar("Pointcut_0_0", new InteropSDefT(classLoader, "trans.$Pointcut_0_0", context));
    varScope.addSVar("Advice_0_0", new InteropSDefT(classLoader, "trans.$Advice_0_0", context));
    varScope.addSVar("Entity_0_0", new InteropSDefT(classLoader, "trans.$Entity_0_0", context));
    varScope.addSVar("Property_0_0", new InteropSDefT(classLoader, "trans.$Property_0_0", context));
    varScope.addSVar("Function_0_0", new InteropSDefT(classLoader, "trans.$Function_0_0", context));
    varScope.addSVar("Variable_0_0", new InteropSDefT(classLoader, "trans.$Variable_0_0", context));
    varScope.addSVar("Pointcut_2_0", new InteropSDefT(classLoader, "trans.$Pointcut_2_0", context));
    varScope.addSVar("ADVICE_4_0", new InteropSDefT(classLoader, "trans.$A$D$V$I$C$E_4_0", context));
    varScope.addSVar("Advice_2_0", new InteropSDefT(classLoader, "trans.$Advice_2_0", context));
    varScope.addSVar("Type_1_0", new InteropSDefT(classLoader, "trans.$Type_1_0", context));
    varScope.addSVar("Results_7_0", new InteropSDefT(classLoader, "trans.$Results_7_0", context));
    varScope.addSVar("ParallelResults_6_0", new InteropSDefT(classLoader, "trans.$Parallel$Results_6_0", context));
    varScope.addSVar("Diff_0_0", new InteropSDefT(classLoader, "trans.$Diff_0_0", context));
    varScope.addSVar("ASTDiff_0_0", new InteropSDefT(classLoader, "trans.$A$S$T$Diff_0_0", context));
    varScope.addSVar("AST_0_0", new InteropSDefT(classLoader, "trans.$A$S$T_0_0", context));
    varScope.addSVar("AST_2_0", new InteropSDefT(classLoader, "trans.$A$S$T_2_0", context));
    varScope.addSVar("Scope_1_0", new InteropSDefT(classLoader, "trans.$Scope_1_0", context));
    varScope.addSVar("Editor_0_0", new InteropSDefT(classLoader, "trans.$Editor_0_0", context));
    varScope.addSVar("Compile_0_0", new InteropSDefT(classLoader, "trans.$Compile_0_0", context));
    varScope.addSVar("Def_1_0", new InteropSDefT(classLoader, "trans.$Def_1_0", context));
    varScope.addSVar("Use_1_0", new InteropSDefT(classLoader, "trans.$Use_1_0", context));
    varScope.addSVar("BadUse_1_0", new InteropSDefT(classLoader, "trans.$Bad$Use_1_0", context));
    varScope.addSVar("Read_1_0", new InteropSDefT(classLoader, "trans.$Read_1_0", context));
    varScope.addSVar("ReadWildcard_2_0", new InteropSDefT(classLoader, "trans.$Read$Wildcard_2_0", context));
    varScope.addSVar("Diff_2_0", new InteropSDefT(classLoader, "trans.$Diff_2_0", context));
    varScope.addSVar("StopLookup_0_0", new InteropSDefT(classLoader, "trans.$Stop$Lookup_0_0", context));
    varScope.addSVar("DefData_3_0", new InteropSDefT(classLoader, "trans.$Def$Data_3_0", context));
    varScope.addSVar("Namespace_0_0", new InteropSDefT(classLoader, "trans.$Namespace_0_0", context));
    varScope.addSVar("Unresolved_1_0", new InteropSDefT(classLoader, "trans.$Unresolved_1_0", context));
    varScope.addSVar("INTERNAL__ERROR_0_0", new InteropSDefT(classLoader, "trans.$I$N$T$E$R$N$A$L__$E$R$R$O$R_0_0", context));
    varScope.addSVar("Timestamp_0_0", new InteropSDefT(classLoader, "trans.$Timestamp_0_0", context));
    varScope.addSVar("String_0_0", new InteropSDefT(classLoader, "trans.$String_0_0", context));
    varScope.addSVar("Anon_1_0", new InteropSDefT(classLoader, "trans.$Anon_1_0", context));
    varScope.addSVar("Anon_0_0", new InteropSDefT(classLoader, "trans.$Anon_0_0", context));
    varScope.addSVar("FileEntries_2_0", new InteropSDefT(classLoader, "trans.$File$Entries_2_0", context));
    varScope.addSVar("Global_0_0", new InteropSDefT(classLoader, "trans.$Global_0_0", context));
    varScope.addSVar("Global_1_0", new InteropSDefT(classLoader, "trans.$Global_1_0", context));
    varScope.addSVar("Global_2_0", new InteropSDefT(classLoader, "trans.$Global_2_0", context));
    varScope.addSVar("COMPLETION_1_0", new InteropSDefT(classLoader, "trans.$C$O$M$P$L$E$T$I$O$N_1_0", context));
    varScope.addSVar("NOCONTEXT_1_0", new InteropSDefT(classLoader, "trans.$N$O$C$O$N$T$E$X$T_1_0", context));
    varScope.addSVar("MARKER_0_0", new InteropSDefT(classLoader, "trans.$M$A$R$K$E$R_0_0", context));
    varScope.addSVar("True_0_0", new InteropSDefT(classLoader, "trans.$True_0_0", context));
    varScope.addSVar("Module_2_0", new InteropSDefT(classLoader, "trans.$Module_2_0", context));
    varScope.addSVar("Entity_2_0", new InteropSDefT(classLoader, "trans.$Entity_2_0", context));
    varScope.addSVar("Property_2_0", new InteropSDefT(classLoader, "trans.$Property_2_0", context));
    varScope.addSVar("IntType_0_0", new InteropSDefT(classLoader, "trans.$Int$Type_0_0", context));
    varScope.addSVar("StringType_0_0", new InteropSDefT(classLoader, "trans.$String$Type_0_0", context));
    varScope.addSVar("IntLit_1_0", new InteropSDefT(classLoader, "trans.$Int$Lit_1_0", context));
    varScope.addSVar("StringLit_1_0", new InteropSDefT(classLoader, "trans.$String$Lit_1_0", context));
    varScope.addSVar("PropAccess_2_0", new InteropSDefT(classLoader, "trans.$Prop$Access_2_0", context));
    varScope.addSVar("Var_1_0", new InteropSDefT(classLoader, "trans.$Var_1_0", context));
    varScope.addSVar("Call_2_0", new InteropSDefT(classLoader, "trans.$Call_2_0", context));
    varScope.addSVar("Print_1_0", new InteropSDefT(classLoader, "trans.$Print_1_0", context));
    varScope.addSVar("Block_1_0", new InteropSDefT(classLoader, "trans.$Block_1_0", context));
    varScope.addSVar("Assign_2_0", new InteropSDefT(classLoader, "trans.$Assign_2_0", context));
    varScope.addSVar("VarDeclInit_3_0", new InteropSDefT(classLoader, "trans.$Var$Decl$Init_3_0", context));
    varScope.addSVar("VarDecl_2_0", new InteropSDefT(classLoader, "trans.$Var$Decl_2_0", context));
    varScope.addSVar("Param_2_0", new InteropSDefT(classLoader, "trans.$Param_2_0", context));
    varScope.addSVar("Function_3_0", new InteropSDefT(classLoader, "trans.$Function_3_0", context));
    varScope.addSVar("Assigned_1_0", new InteropSDefT(classLoader, "trans.$Assigned_1_0", context));
    varScope.addSVar("After_0_0", new InteropSDefT(classLoader, "trans.$After_0_0", context));
    varScope.addSVar("Before_0_0", new InteropSDefT(classLoader, "trans.$Before_0_0", context));
    varScope.addSVar("Advice_6_0", new InteropSDefT(classLoader, "trans.$Advice_6_0", context));
    varScope.addSVar("Pointcut_3_0", new InteropSDefT(classLoader, "trans.$Pointcut_3_0", context));
    varScope.addSVar("EntityImport_2_0", new InteropSDefT(classLoader, "trans.$Entity$Import_2_0", context));
    varScope.addSVar("WildcardImport_1_0", new InteropSDefT(classLoader, "trans.$Wildcard$Import_1_0", context));
    varScope.addSVar("Import_1_0", new InteropSDefT(classLoader, "trans.$Import_1_0", context));
    varScope.addSVar("Aspect_2_0", new InteropSDefT(classLoader, "trans.$Aspect_2_0", context));
    varScope.addSVar("Module_3_0", new InteropSDefT(classLoader, "trans.$Module_3_0", context));
    varScope.addSVar("innermost_scope_Index_ReadSet_1_0", new InteropSDefT(classLoader, "trans.innermost_scope_$Index_$Read$Set_1_0", context));
    varScope.addSVar("DYNAMIC__CALLS_0_0", new InteropSDefT(classLoader, "trans.$D$Y$N$A$M$I$C__$C$A$L$L$S_0_0", context));
    varScope.addSVar("undefine_Index_ReadSet_0_1", new InteropSDefT(classLoader, "trans.undefine_$Index_$Read$Set_0_1", context));
    varScope.addSVar("throw_Index_ReadSet_1_1", new InteropSDefT(classLoader, "trans.throw_$Index_$Read$Set_1_1", context));
    varScope.addSVar("continue_to_label_Index_ReadSet_0_1", new InteropSDefT(classLoader, "trans.continue_to_label_$Index_$Read$Set_0_1", context));
    varScope.addSVar("continue_Index_ReadSet_0_0", new InteropSDefT(classLoader, "trans.continue_$Index_$Read$Set_0_0", context));
    varScope.addSVar("break_bp_Index_ReadSet_0_0", new InteropSDefT(classLoader, "trans.break_bp_$Index_$Read$Set_0_0", context));
    varScope.addSVar("break_to_label_Index_ReadSet_0_1", new InteropSDefT(classLoader, "trans.break_to_label_$Index_$Read$Set_0_1", context));
    varScope.addSVar("break_Index_ReadSet_0_0", new InteropSDefT(classLoader, "trans.break_$Index_$Read$Set_0_0", context));
    varScope.addSVar("all_keys_Index_ReadSet_0_0", new InteropSDefT(classLoader, "trans.all_keys_$Index_$Read$Set_0_0", context));
    varScope.addSVar("bigfold_Index_ReadSet_1_0", new InteropSDefT(classLoader, "trans.bigfold_$Index_$Read$Set_1_0", context));
    varScope.addSVar("fold_Index_ReadSet_1_0", new InteropSDefT(classLoader, "trans.fold_$Index_$Read$Set_1_0", context));
    varScope.addSVar("bigchain_Index_ReadSet_0_0", new InteropSDefT(classLoader, "trans.bigchain_$Index_$Read$Set_0_0", context));
    varScope.addSVar("chain_Index_ReadSet_0_0", new InteropSDefT(classLoader, "trans.chain_$Index_$Read$Set_0_0", context));
    varScope.addSVar("bigbagof_Index_ReadSet_0_0", new InteropSDefT(classLoader, "trans.bigbagof_$Index_$Read$Set_0_0", context));
    varScope.addSVar("once_Index_ReadSet_0_0", new InteropSDefT(classLoader, "trans.once_$Index_$Read$Set_0_0", context));
    varScope.addSVar("reverse_bagof_Index_ReadSet_1_0", new InteropSDefT(classLoader, "trans.reverse_bagof_$Index_$Read$Set_1_0", context));
    varScope.addSVar("bagof_Index_ReadSet_0_0", new InteropSDefT(classLoader, "trans.bagof_$Index_$Read$Set_0_0", context));
    varScope.addSVar("Index_ReadSet_0_0", new InteropSDefT(classLoader, "trans.$Index_$Read$Set_0_0", context));
    varScope.addSVar("aux_Index_ReadSet_0_1", new InteropSDefT(classLoader, "trans.aux_$Index_$Read$Set_0_1", context));
    varScope.addSVar("innermost_scope_Index_UnresolvedSet_1_0", new InteropSDefT(classLoader, "trans.innermost_scope_$Index_$Unresolved$Set_1_0", context));
    varScope.addSVar("undefine_Index_UnresolvedSet_0_1", new InteropSDefT(classLoader, "trans.undefine_$Index_$Unresolved$Set_0_1", context));
    varScope.addSVar("throw_Index_UnresolvedSet_1_1", new InteropSDefT(classLoader, "trans.throw_$Index_$Unresolved$Set_1_1", context));
    varScope.addSVar("continue_to_label_Index_UnresolvedSet_0_1", new InteropSDefT(classLoader, "trans.continue_to_label_$Index_$Unresolved$Set_0_1", context));
    varScope.addSVar("continue_Index_UnresolvedSet_0_0", new InteropSDefT(classLoader, "trans.continue_$Index_$Unresolved$Set_0_0", context));
    varScope.addSVar("break_bp_Index_UnresolvedSet_0_0", new InteropSDefT(classLoader, "trans.break_bp_$Index_$Unresolved$Set_0_0", context));
    varScope.addSVar("break_to_label_Index_UnresolvedSet_0_1", new InteropSDefT(classLoader, "trans.break_to_label_$Index_$Unresolved$Set_0_1", context));
    varScope.addSVar("break_Index_UnresolvedSet_0_0", new InteropSDefT(classLoader, "trans.break_$Index_$Unresolved$Set_0_0", context));
    varScope.addSVar("all_keys_Index_UnresolvedSet_0_0", new InteropSDefT(classLoader, "trans.all_keys_$Index_$Unresolved$Set_0_0", context));
    varScope.addSVar("bigfold_Index_UnresolvedSet_1_0", new InteropSDefT(classLoader, "trans.bigfold_$Index_$Unresolved$Set_1_0", context));
    varScope.addSVar("fold_Index_UnresolvedSet_1_0", new InteropSDefT(classLoader, "trans.fold_$Index_$Unresolved$Set_1_0", context));
    varScope.addSVar("bigchain_Index_UnresolvedSet_0_0", new InteropSDefT(classLoader, "trans.bigchain_$Index_$Unresolved$Set_0_0", context));
    varScope.addSVar("chain_Index_UnresolvedSet_0_0", new InteropSDefT(classLoader, "trans.chain_$Index_$Unresolved$Set_0_0", context));
    varScope.addSVar("bigbagof_Index_UnresolvedSet_0_0", new InteropSDefT(classLoader, "trans.bigbagof_$Index_$Unresolved$Set_0_0", context));
    varScope.addSVar("once_Index_UnresolvedSet_0_0", new InteropSDefT(classLoader, "trans.once_$Index_$Unresolved$Set_0_0", context));
    varScope.addSVar("reverse_bagof_Index_UnresolvedSet_1_0", new InteropSDefT(classLoader, "trans.reverse_bagof_$Index_$Unresolved$Set_1_0", context));
    varScope.addSVar("bagof_Index_UnresolvedSet_0_0", new InteropSDefT(classLoader, "trans.bagof_$Index_$Unresolved$Set_0_0", context));
    varScope.addSVar("Index_UnresolvedSet_0_0", new InteropSDefT(classLoader, "trans.$Index_$Unresolved$Set_0_0", context));
    varScope.addSVar("aux_Index_UnresolvedSet_0_1", new InteropSDefT(classLoader, "trans.aux_$Index_$Unresolved$Set_0_1", context));
    varScope.addSVar("innermost_scope_CurrentFile_1_0", new InteropSDefT(classLoader, "trans.innermost_scope_$Current$File_1_0", context));
    varScope.addSVar("undefine_CurrentFile_0_1", new InteropSDefT(classLoader, "trans.undefine_$Current$File_0_1", context));
    varScope.addSVar("throw_CurrentFile_1_1", new InteropSDefT(classLoader, "trans.throw_$Current$File_1_1", context));
    varScope.addSVar("continue_to_label_CurrentFile_0_1", new InteropSDefT(classLoader, "trans.continue_to_label_$Current$File_0_1", context));
    varScope.addSVar("continue_CurrentFile_0_0", new InteropSDefT(classLoader, "trans.continue_$Current$File_0_0", context));
    varScope.addSVar("break_bp_CurrentFile_0_0", new InteropSDefT(classLoader, "trans.break_bp_$Current$File_0_0", context));
    varScope.addSVar("break_to_label_CurrentFile_0_1", new InteropSDefT(classLoader, "trans.break_to_label_$Current$File_0_1", context));
    varScope.addSVar("break_CurrentFile_0_0", new InteropSDefT(classLoader, "trans.break_$Current$File_0_0", context));
    varScope.addSVar("all_keys_CurrentFile_0_0", new InteropSDefT(classLoader, "trans.all_keys_$Current$File_0_0", context));
    varScope.addSVar("bigfold_CurrentFile_1_0", new InteropSDefT(classLoader, "trans.bigfold_$Current$File_1_0", context));
    varScope.addSVar("fold_CurrentFile_1_0", new InteropSDefT(classLoader, "trans.fold_$Current$File_1_0", context));
    varScope.addSVar("bigchain_CurrentFile_0_0", new InteropSDefT(classLoader, "trans.bigchain_$Current$File_0_0", context));
    varScope.addSVar("chain_CurrentFile_0_0", new InteropSDefT(classLoader, "trans.chain_$Current$File_0_0", context));
    varScope.addSVar("bigbagof_CurrentFile_0_0", new InteropSDefT(classLoader, "trans.bigbagof_$Current$File_0_0", context));
    varScope.addSVar("once_CurrentFile_0_0", new InteropSDefT(classLoader, "trans.once_$Current$File_0_0", context));
    varScope.addSVar("reverse_bagof_CurrentFile_1_0", new InteropSDefT(classLoader, "trans.reverse_bagof_$Current$File_1_0", context));
    varScope.addSVar("bagof_CurrentFile_0_0", new InteropSDefT(classLoader, "trans.bagof_$Current$File_0_0", context));
    varScope.addSVar("aux_CurrentFile_0_1", new InteropSDefT(classLoader, "trans.aux_$Current$File_0_1", context));
    varScope.addSVar("innermost_scope_IsImported_1_0", new InteropSDefT(classLoader, "trans.innermost_scope_$Is$Imported_1_0", context));
    varScope.addSVar("undefine_IsImported_0_1", new InteropSDefT(classLoader, "trans.undefine_$Is$Imported_0_1", context));
    varScope.addSVar("throw_IsImported_1_1", new InteropSDefT(classLoader, "trans.throw_$Is$Imported_1_1", context));
    varScope.addSVar("continue_to_label_IsImported_0_1", new InteropSDefT(classLoader, "trans.continue_to_label_$Is$Imported_0_1", context));
    varScope.addSVar("continue_IsImported_0_0", new InteropSDefT(classLoader, "trans.continue_$Is$Imported_0_0", context));
    varScope.addSVar("break_bp_IsImported_0_0", new InteropSDefT(classLoader, "trans.break_bp_$Is$Imported_0_0", context));
    varScope.addSVar("break_to_label_IsImported_0_1", new InteropSDefT(classLoader, "trans.break_to_label_$Is$Imported_0_1", context));
    varScope.addSVar("break_IsImported_0_0", new InteropSDefT(classLoader, "trans.break_$Is$Imported_0_0", context));
    varScope.addSVar("all_keys_IsImported_0_0", new InteropSDefT(classLoader, "trans.all_keys_$Is$Imported_0_0", context));
    varScope.addSVar("bigfold_IsImported_1_0", new InteropSDefT(classLoader, "trans.bigfold_$Is$Imported_1_0", context));
    varScope.addSVar("fold_IsImported_1_0", new InteropSDefT(classLoader, "trans.fold_$Is$Imported_1_0", context));
    varScope.addSVar("bigchain_IsImported_0_0", new InteropSDefT(classLoader, "trans.bigchain_$Is$Imported_0_0", context));
    varScope.addSVar("chain_IsImported_0_0", new InteropSDefT(classLoader, "trans.chain_$Is$Imported_0_0", context));
    varScope.addSVar("bigbagof_IsImported_0_0", new InteropSDefT(classLoader, "trans.bigbagof_$Is$Imported_0_0", context));
    varScope.addSVar("once_IsImported_0_0", new InteropSDefT(classLoader, "trans.once_$Is$Imported_0_0", context));
    varScope.addSVar("reverse_bagof_IsImported_1_0", new InteropSDefT(classLoader, "trans.reverse_bagof_$Is$Imported_1_0", context));
    varScope.addSVar("bagof_IsImported_0_0", new InteropSDefT(classLoader, "trans.bagof_$Is$Imported_0_0", context));
    varScope.addSVar("IsImported_0_0", new InteropSDefT(classLoader, "trans.$Is$Imported_0_0", context));
    varScope.addSVar("aux_IsImported_0_2", new InteropSDefT(classLoader, "trans.aux_$Is$Imported_0_2", context));
  }
}
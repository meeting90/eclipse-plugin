module Tests-Completion

language EntityWithAspects

setup Header [[
  module TestsCompletion
    
  entity A {
    x : B
  }
]]

test Complete property access [[
  entity B {
    yyyyy : A
    f(a : A) {
      var v : A = a.x.[[y]]
    }
  }
]] complete to "yyyyy"

test Complete parameter [[
  entity B {
    f(test : A) {
      var v : A = [[t]]
    }
  }
]] complete to "test"

test Complete local variable [[
  entity B {
    f(a : A) {
      var test : A = a
      var b : A = [[t]]
    }
  }
]] complete to "test"

test Complete function call [[
  entity B {
    prt() print x
    g() {
      var test : String = [[p]]()
    }
  }
]] complete to "prt"

test Complete primitive type 1 [[
  entity B {
    t : [[St]]
  }
]] complete to "String"

test Complete primitive type 2 [[
  entity B {
    t : [[I]]
  }
]] complete to "Int"

test Complete entity type 1 [[
	entity Test {}
  entity B {
    t : [[T]]
  }
]] complete to "Test"

test Complete entity type 2 [[
  entity StringLike {}
  entity B {
    t : [[StringL]]
  }
]] complete to "StringLike"

test Complete joinpoint 1 [[
	aspect P {
	    pointcut StringChanged(s : String): assigned(String)
	    advice Adv1 before(s : String): [[St]](s) print s
	}
]] complete to "StringChanged"

test Complete joinpoint 2 [[
  aspect P {
      pointcut IntChanged(i : Int): assigned(Int)
      advice Adv2 after(i : Int): [[I]](i) print i
  }
]] complete to "IntChanged"

test Complete advice parameter 1 [[
  aspect P {
      pointcut StringChanged(s : String): assigned(String)
      advice Adv1 before(string : String): StringChanged([[s]]) print string
  }
]] complete to "string"

test Complete advice parameter 2 [[
  aspect P {
      pointcut IntChanged(i : Int): assigned(Int)
      advice Adv2 after(integer : Int): IntChanged([[i]]) print integer
  }
]] complete to "integer"
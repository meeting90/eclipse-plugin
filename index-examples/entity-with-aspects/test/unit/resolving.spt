module Tests-Resolving

language EntityWithAspects

setup Header [[
  module TestsResolving
    
  entity A {
    x : B
  }
]]

test Resolve entity reference [[
  entity [[B]] {
    b : [[B]]
  }
]] resolve #2 to #1

test Resolve property access [[
  entity B {
    f(c : C) {
      var v : C = c.[[c]] 
    }
  }
  entity C {
    [[c]] : C
  }
]] resolve #1 to #2

test Resolve local variable [[
  entity B {
    f() {
      var [[a]] : A
      var b : B = [[a]].x
    }
  }
]] resolve #2 to #1

test Resolve local property access [[
  entity B {
    [[x]] : A
    f() {
      var v : A = [[x]]
    }
  }
]] resolve #2 to #1

test Resolve parameter reference 1 [[
  entity B {
    x : A
    f([[x]] : A) {
      var v : A = [[x]]
    }
  }
]] resolve #2 to #1

test Resolve parameter reference 2 [[
  entity B {}
  aspect P {
      pointcut StringChanged(s : String): assigned(String)
      advice Adv1 before([[s]] : String): StringChanged(s) print [[s]]
  }
]] resolve #2 to #1

test Resolve parameter reference 3 [[
  entity B {}
  aspect P {
      pointcut StringChanged(s : String): assigned(String)
      advice Adv1 before([[s]] : String): StringChanged([[s]]) print s
  }
]] resolve #2 to #1

test Resolve pointcut [[
  entity B {}
  aspect P {
      pointcut [[StringChanged]](s : String): assigned(String)
      advice Adv1 before(s : String): [[StringChanged]](s) print s
  }
]] resolve #2 to #1
module names

imports

  lib/analysis-library
  lib/analysis-library-internal
  lib/index-library
  include/EntityWithAspects
  
namespaces

  Module
  Import
  
  Aspect
  Pointcut
  Advice
    
  Entity
  Property
  Function
  
  Variable

rules // Module

  Module(x, _, _) :
  	defines non-unique Module x
  	scopes Entity, Aspect
 
  EntityImport(m, e) :
    refers to Module m
    refers to Entity e
    // TODO: Import one entity
    
  WildcardImport(m) :
    defines Import m
    refers to Module m
    imports Entity from Module m {current-file}
     
rules // Aspect

  Aspect(x, _) :
  	defines non-unique Aspect x
  	scopes Pointcut, Advice
  	
  Pointcut(x, _, _) :
  	defines non-unique Pointcut x
  	scopes Variable
  	
  Advice(x, _, _, p, _, _) :
    defines non-unique Advice x
    refers to Pointcut p
    scopes Variable
 
rules // Entity

  Entity(x, _) :
  	defines non-unique Entity x of type Type(x)
  	scopes Property, Function
  	
  Type(x) :
    refers to Entity x
  	refers to Entity "Int"
  	refers to Entity "String"  	
  	
rules // Property

  Property(x, t) :
    defines non-unique Property x of type t
    
	PropAccess(e, x) :
	  refers to Property x in Entity t
    where e has type Type(t)

rules // Function

  Function(x, _, _) :
    defines non-unique Function x
    scopes Variable, Property
    // TODO: Remove Property namespace from scope
    
  Call(x, _) :
  	refers to Function x

rules // Variable

  VarDecl(x, t) :
  	defines Variable x of type t
  	
  VarDeclInit(x, t, _) :
  	defines Variable x of type t
  
  Param(x, t) :
  	defines Variable x of type t
  	
  Var(x) :
  	refers to Variable x
  	refers to Property x
  	
rules // Control flow

  Block(_) :
  	scopes Variable, Property
  	// TODO: Remove Property namespace from scope
  
Module(
  "generate"
, [ Imports(
      [ Import("libstratego-lib")
      , Import("include/EntityWithAspects")
      , Import("lib/editor-common.generated")
      , Import("lib/index-library")
      , Import("lib/analysis-library")
      , Import("lib/compilation-library")
      , Import("types")
      , Import("names")
      ]
    )
  , Signature(
      [ Constructors(
          [ OpDecl(
              "Pointcut"
            , FunType(
                [ConstType(SortNoArgs("Uri")), ConstType(SortNoArgs("Type"))]
              , ConstType(SortNoArgs("Pointcut"))
              )
            )
          , OpDecl(
              "ADVICE"
            , FunType(
                [ ConstType(SortNoArgs("BeforeAfter"))
                , ConstType(SortNoArgs("Params"))
                , ConstType(SortNoArgs("Pointcut"))
                , ConstType(SortNoArgs("Statement"))
                ]
              , ConstType(SortNoArgs("AdviceData"))
              )
            )
          , OpDecl(
              "Advice"
            , FunType(
                [ConstType(SortNoArgs("Uri")), ConstType(SortNoArgs("AdviceData"))]
              , ConstType(SortNoArgs("Advice"))
              )
            )
          ]
        )
      ]
    )
  , Rules(
      [ RDefT(
          "adjust-index-def-data"
        , [DefaultVarDec("store-results")]
        , [DefaultVarDec("namespace"), DefaultVarDec("path")]
        , RuleNoCond(
            NoAnnoList(Op("Pointcut", [Wld(), Wld(), Var("type")]))
          , App(
              CallNoArgs(SVar("store-results"))
            , NoAnnoList(
                Op(
                  "Pointcut"
                , [NoAnnoList(ListTail([Var("namespace")], Var("path"))), Var("type")]
                )
              )
            )
          )
        )
      , RDefT(
          "adjust-index-def-data"
        , [DefaultVarDec("store-results")]
        , [DefaultVarDec("namespace"), DefaultVarDec("path")]
        , Rule(
            NoAnnoList(
              Op(
                "Advice"
              , [ Wld()
                , Var("beforeafter")
                , Var("params")
                , Var("pointcut")
                , Wld()
                , Var("statement")
                ]
              )
            )
          , App(
              CallNoArgs(SVar("store-results"))
            , NoAnnoList(
                Op(
                  "Advice"
                , [NoAnnoList(ListTail([Var("namespace")], Var("path"))), Var("data")]
                )
              )
            )
          , Assign(
              Var("data")
            , NoAnnoList(
                Op(
                  "ADVICE"
                , [Var("beforeafter"), Var("params"), Var("pointcut"), Var("statement")]
                )
              )
            )
          )
        )
      ]
    )
  , Rules(
      [ RDefT(
          "index-compile-ast"
        , []
        , [DefaultVarDec("file"), DefaultVarDec("subfile")]
        , Rule(
            Var("ast")
          , NoAnnoList(Op("None", []))
          , [ WithClause(
                IfThen(
                  Assign(
                    Var("name")
                  , App(CallNoArgs(SVar("index-uri-name")), Var("subfile"))
                  )
                , Seq(
                    Assign(
                      Var("java")
                    , App(CallNoArgs(SVar("to-java")), Var("ast"))
                    )
                  , Seq(
                      Assign(
                        Var("full-path")
                      , App(CallNoArgs(SVar("dirname")), Var("file"))
                      )
                    , Seq(
                        Assign(
                          Var("filename")
                        , App(
                            CallT(SVar("guarantee-extension"), [], [NoAnnoList(Str("\"java\""))])
                          , Var("name")
                          )
                        )
                      , Seq(
                          Assign(
                            Var("writePath")
                          , NoAnnoList(
                              StringQuotation1(
                                "\t                     "
                              , [StringEscape1("\t                     ", Var("full-path")), QStr("/java/")]
                              )
                            )
                          )
                        , Seq(
                            Assign(
                              Var("writeFile")
                            , NoAnnoList(
                                StringQuotation1(
                                  "\t                      "
                                , [StringEscape1("\t                      ", Var("writePath")), StringEscape1("\t                                 ", Var("filename"))]
                                )
                              )
                            )
                          , Seq(
                              Call(
                                SVar("try")
                              , [BA(CallNoArgs(SVar("mkdir")), Var("writePath"))]
                              )
                            , BA(
                                CallNoArgs(SVar("fclose"))
                              , App(
                                  CallNoArgs(SVar("fputs"))
                                , NoAnnoList(
                                    Tuple(
                                      [ Var("java")
                                      , App(
                                          CallNoArgs(SVar("fopen"))
                                        , NoAnnoList(Tuple([Var("writeFile"), NoAnnoList(Str("\"w\""))]))
                                        )
                                      ]
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            ]
          )
        )
      ]
    )
  , Rules(
      [ RDefNoArgs(
          "to-java"
        , RuleNoCond(
            NoAnnoList(List([Wld()]))
          , App(
              CallNoArgs(SVar("concat-strings"))
            , RootApp(Call(SVar("map"), [CallNoArgs(SVar("to-java"))]))
            )
          )
        )
      , RDefNoArgs(
          "to-java"
        , Rule(
            NoAnnoList(
              Op(
                "Module"
              , [Var("name"), Var("imports"), Var("entities")]
              )
            )
          , NoAnnoList(
              StringQuotation1(
                "      "
              , [ QStr("package ")
                , StringEscape1("              ", Var("name"))
                , QStr(";\n      ")
                , StringEscape1("      ", Var("imports'"))
                , QStr("\n      ")
                , StringEscape1("      ", Var("entities'"))
                ]
              )
            )
          , Seq(
              Assign(
                Var("entities'")
              , App(
                  Call(SVar("map"), [CallNoArgs(SVar("to-java"))])
                , Var("entities")
                )
              )
            , Assign(
                Var("imports'")
              , App(
                  Call(SVar("map"), [CallNoArgs(SVar("to-java"))])
                , Var("imports")
                )
              )
            )
          )
        )
      , RDefNoArgs(
          "to-java"
        , RuleNoCond(
            NoAnnoList(Op("Aspect", [Wld(), Wld()]))
          , NoAnnoList(Str("\"\""))
          )
        )
      , RDefNoArgs(
          "to-java"
        , Rule(
            NoAnnoList(Op("Import", [Var("type")]))
          , NoAnnoList(
              StringQuotation1(
                "\t                    "
              , [QStr("import "), StringEscape1("\t                           ", Var("type'")), QStr(";\n\t  ")]
              )
            )
          , Assign(
              Var("type'")
            , App(CallNoArgs(SVar("to-java")), Var("type"))
            )
          )
        )
      , RDefNoArgs(
          "to-java"
        , RuleNoCond(
            NoAnnoList(Op("EntityImport", [Var("mod"), Var("entity")]))
          , NoAnnoList(
              StringQuotation1(
                "\t                                 "
              , [ StringEscape1("\t                                 ", Var("mod"))
                , QStr(".")
                , StringEscape1("\t                                       ", Var("entity"))
                ]
              )
            )
          )
        )
      , RDefNoArgs(
          "to-java"
        , RuleNoCond(
            NoAnnoList(Op("WildcardImport", [Var("mod")]))
          , NoAnnoList(
              StringQuotation1(
                "\t                           "
              , [StringEscape1("\t                           ", Var("mod")), QStr(".*")]
              )
            )
          )
        )
      , RDefNoArgs(
          "to-java"
        , RuleNoCond(
            NoAnnoList(Op("Entity", [Var("name"), Var("members")]))
          , NoAnnoList(
              StringQuotation1(
                "      "
              , [ QStr("class ")
                , StringEscape1("            ", Var("name"))
                , QStr(" \n      {\n          ")
                , StringEscape1(
                    "          "
                  , App(
                      Call(SVar("map"), [CallNoArgs(SVar("to-java"))])
                    , Var("members")
                    )
                  )
                , QStr("\n      }\n      \n      ")
                ]
              )
            )
          )
        )
      , RDefNoArgs(
          "to-java"
        , Rule(
            NoAnnoList(Op("Property", [Var("name"), Var("type")]))
          , NoAnnoList(
              StringQuotation1(
                "      "
              , [ QStr("private ")
                , StringEscape1("              ", Var("typename"))
                , QStr(" ")
                , StringEscape1("                         ", Var("name"))
                , QStr(";\n    \n    public ")
                , StringEscape1("           ", Var("typename"))
                , QStr(" get_")
                , StringEscape1("                          ", Var("name"))
                , QStr(" \n    {\n        return ")
                , StringEscape1("               ", Var("name"))
                , QStr(";\n    }\n    \n    public void set_")
                , StringEscape1("                    ", Var("name"))
                , QStr("(")
                , StringEscape1("                           ", Var("typename"))
                , QStr(" ")
                , StringEscape1("                                      ", Var("name"))
                , QStr(") \n    {\n        this.")
                , StringEscape1("             ", Var("name"))
                , QStr(" = ")
                , StringEscape1("                      ", Var("name"))
                , QStr(";    \n    }\n    \n    ")
                ]
              )
            )
          , Assign(
              Var("typename")
            , App(CallNoArgs(SVar("to-java")), Var("type"))
            )
          )
        )
      , RDefNoArgs(
          "to-java"
        , RuleNoCond(
            NoAnnoList(
              Op(
                "Function"
              , [Var("name"), Var("params"), Var("statement")]
              )
            )
          , NoAnnoList(
              StringQuotation1(
                "        "
              , [ QStr("public void ")
                , StringEscape1("                    ", Var("name"))
                , QStr("(")
                , StringEscape1("                           ", App(CallNoArgs(SVar("params-to-java")), Var("params")))
                , QStr(")\n        ")
                , StringEscape1("        ", App(CallNoArgs(SVar("to-java")), Var("statement")))
                , QStr("    \n      ")
                ]
              )
            )
          )
        )
      , RDefNoArgs(
          "to-java"
        , RuleNoCond(
            NoAnnoList(Op("Param", [Var("name"), Var("type")]))
          , NoAnnoList(
              StringQuotation1(
                "                                    "
              , [ StringEscape1("                                    ", App(CallNoArgs(SVar("to-java")), Var("type")))
                , QStr(" ")
                , StringEscape1("                                                     ", Var("name"))
                ]
              )
            )
          )
        )
      , RDefNoArgs(
          "params-to-java"
        , RuleNoCond(NoAnnoList(List([])), NoAnnoList(Str("\"\"")))
        )
      , RDefNoArgs(
          "params-to-java"
        , RuleNoCond(
            NoAnnoList(
              ListTail(
                [NoAnnoList(Op("Param", [Var("name"), Var("type")]))]
              , Var("rest")
              )
            )
          , NoAnnoList(
              StringQuotation1(
                "                                                  "
              , [ StringEscape1("                                                  ", App(CallNoArgs(SVar("to-java")), Var("type")))
                , QStr(" ")
                , StringEscape1("                                                                   ", Var("name"))
                , StringEscape1("                                                                         ", App(CallNoArgs(SVar("params-to-java2")), Var("rest")))
                ]
              )
            )
          )
        )
      , RDefNoArgs(
          "params-to-java"
        , RuleNoCond(
            NoAnnoList(
              ListTail(
                [NoAnnoList(Op("Param", [Var("name"), Var("type")]))]
              , NoAnnoList(List([]))
              )
            )
          , NoAnnoList(
              StringQuotation1(
                "                                                "
              , [ StringEscape1("                                                ", App(CallNoArgs(SVar("to-java")), Var("type")))
                , QStr(" ")
                , StringEscape1("                                                                 ", Var("name"))
                ]
              )
            )
          )
        )
      , RDefNoArgs(
          "params-to-java2"
        , RuleNoCond(
            NoAnnoList(
              ListTail(
                [NoAnnoList(Op("Param", [Var("name"), Var("type")]))]
              , Var("rest")
              )
            )
          , NoAnnoList(
              StringQuotation1(
                "                                                   "
              , [ QStr(", ")
                , StringEscape1("                                                     ", App(CallNoArgs(SVar("to-java")), Var("type")))
                , QStr(" ")
                , StringEscape1("                                                                      ", Var("name"))
                , StringEscape1("                                                                            ", App(CallNoArgs(SVar("params-to-java2")), Var("rest")))
                ]
              )
            )
          )
        )
      , RDefNoArgs(
          "params-to-java2"
        , RuleNoCond(
            NoAnnoList(
              ListTail(
                [NoAnnoList(Op("Param", [Var("name"), Var("type")]))]
              , NoAnnoList(List([]))
              )
            )
          , NoAnnoList(
              StringQuotation1(
                "                                                 "
              , [ QStr(", ")
                , StringEscape1("                                                   ", App(CallNoArgs(SVar("to-java")), Var("type")))
                , QStr(" ")
                , StringEscape1("                                                                    ", Var("name"))
                ]
              )
            )
          )
        )
      , RDefNoArgs(
          "to-java"
        , RuleNoCond(
            NoAnnoList(Op("Block", [Var("statements")]))
          , NoAnnoList(
              StringQuotation1(
                "        "
              , [ QStr("{\n            ")
                , StringEscape1(
                    "            "
                  , App(
                      Call(SVar("map"), [CallNoArgs(SVar("to-java"))])
                    , Var("statements")
                    )
                  )
                , QStr("\n        }\n      ")
                ]
              )
            )
          )
        )
      , RDefNoArgs(
          "to-java"
        , Rule(
            NoAnnoList(Op("Assign", [Var("lhs"), Var("rhs")]))
          , NoAnnoList(
              StringQuotation1(
                "                            "
              , [ StringEscape1("                            ", Var("before"))
                , QStr("\n      ")
                , StringEscape1("      ", App(CallNoArgs(SVar("to-java")), Var("lhs")))
                , QStr(" = ")
                , StringEscape1("                        ", App(CallNoArgs(SVar("to-java")), Var("rhs")))
                , QStr(";\n    \n      ")
                , StringEscape1("      ", Var("after"))
                ]
              )
            )
          , [ WithClause(
                Seq(
                  Assign(
                    AnnoList(Wld(), [Var("uri")])
                  , App(CallNoArgs(SVar("index-find-key")), Var("lhs"))
                  )
                , Seq(
                    Assign(
                      Var("modName")
                    , App(CallNoArgs(SVar("last")), Var("uri"))
                    )
                  , Seq(
                      Assign(
                        Var("aspects")
                      , App(
                          CallT(
                            SVar("index-get-children")
                          , []
                          , [NoAnnoList(Op("Aspect", []))]
                          )
                        , NoAnnoList(
                            List([NoAnnoList(Op("Module", [])), Var("modName")])
                          )
                        )
                      )
                    , Seq(
                        Assign(
                          Var("adviceDefs")
                        , App(
                            Call(
                              SVar("mapconcat")
                            , [CallT(
                                 SVar("index-get-children")
                               , []
                               , [NoAnnoList(Op("Advice", []))]
                               )]
                            )
                          , Var("aspects")
                          )
                        )
                      , Seq(
                          Assign(
                            Var("adviceData")
                          , App(
                              Call(
                                SVar("mapconcat")
                              , [ Seq(
                                    CallNoArgs(SVar("index-uri"))
                                  , Seq(
                                      LRule(
                                        RuleNoCond(
                                          Var("uri")
                                        , NoAnnoList(
                                            Op("Advice", [Var("uri"), NoAnnoList(Tuple([]))])
                                          )
                                        )
                                      )
                                    , CallNoArgs(SVar("index-get-all-values"))
                                    )
                                  )
                                ]
                              )
                            , Var("adviceDefs")
                            )
                          )
                        , Seq(
                            Assign(
                              Var("advices")
                            , App(
                                Call(
                                  SVar("map")
                                , [CallT(SVar("to-java-fixadvice"), [], [Var("rhs")])]
                                )
                              , Var("adviceData")
                              )
                            )
                          , Seq(
                              Assign(
                                Var("type")
                              , App(
                                  CallNoArgs(SVar("to-java-aspect-type"))
                                , App(CallNoArgs(SVar("type-of")), Var("lhs"))
                                )
                              )
                            , Seq(
                                Assign(
                                  Var("before")
                                , App(
                                    Call(
                                      SVar("filter")
                                    , [ Match(
                                          NoAnnoList(
                                            Tuple(
                                              [ NoAnnoList(Op("Before", []))
                                              , NoAnnoList(Op("Assigned", [Var("type")]))
                                              , RootApp(CallNoArgs(SVar("to-java")))
                                              ]
                                            )
                                          )
                                        )
                                      ]
                                    )
                                  , Var("advices")
                                  )
                                )
                              , Assign(
                                  Var("after")
                                , App(
                                    Call(
                                      SVar("filter")
                                    , [ Match(
                                          NoAnnoList(
                                            Tuple(
                                              [ NoAnnoList(Op("After", []))
                                              , NoAnnoList(Op("Assigned", [Var("type")]))
                                              , RootApp(CallNoArgs(SVar("to-java")))
                                              ]
                                            )
                                          )
                                        )
                                      ]
                                    )
                                  , Var("advices")
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            ]
          )
        )
      , RDefT(
          "to-java-fixadvice"
        , []
        , [DefaultVarDec("exp")]
        , Rule(
            NoAnnoList(
              Op(
                "ADVICE"
              , [Var("beforeafter"), Var("params"), Var("pointcut"), Var("statement")]
              )
            )
          , NoAnnoList(
              Tuple([Var("beforeafter"), Var("type"), Var("statement'")])
            )
          , [ WithClause(
                Seq(
                  Assign(
                    NoAnnoList(Op("Pointcut", [Wld(), Var("types")]))
                  , App(
                      CallNoArgs(SVar("index-get"))
                    , NoAnnoList(
                        Op(
                          "Pointcut"
                        , [App(CallNoArgs(SVar("index-uri")), Var("pointcut")), NoAnnoList(Tuple([]))]
                        )
                      )
                    )
                  )
                , Seq(
                    Assign(
                      NoAnnoList(ListTail([Var("type")], Wld()))
                    , Var("types")
                    )
                  , Seq(
                      Assign(
                        NoAnnoList(
                          ListTail(
                            [NoAnnoList(Op("Param", [Var("paramName"), Wld()]))]
                          , Wld()
                          )
                        )
                      , Var("params")
                      )
                    , Seq(
                        Assign(
                          Var("var")
                        , NoAnnoList(Op("Var", [Var("paramName")]))
                        )
                      , Assign(
                          Var("statement'")
                        , App(
                            Call(
                              SVar("try")
                            , [ Call(
                                  SVar("sometd")
                                , [CallT(
                                     SVar("to-java-aspect-replace-var")
                                   , []
                                   , [Var("var"), Var("exp")]
                                   )]
                                )
                              ]
                            )
                          , Var("statement")
                          )
                        )
                      )
                    )
                  )
                )
              )
            ]
          )
        )
      , RDefT(
          "to-java-aspect-replace-var"
        , []
        , [DefaultVarDec("var"), DefaultVarDec("exp")]
        , Rule(
            Var("x")
          , Var("exp")
          , BA(
              CallNoArgs(SVar("eq"))
            , NoAnnoList(
                Tuple(
                  [ App(CallNoArgs(SVar("strip-annos")), Var("x"))
                  , App(CallNoArgs(SVar("strip-annos")), Var("var"))
                  ]
                )
              )
            )
          )
        )
      , SDefNoArgs(
          "to-java-aspect-type"
        , SwitchChoice(
            Id()
          , [ SwitchCase(
                Match(NoAnnoList(Op("Type", [NoAnnoList(Str("\"String\""))])))
              , Build(NoAnnoList(Op("StringType", [])))
              )
            , SwitchCase(
                Match(NoAnnoList(Op("Type", [NoAnnoList(Str("\"Int\""))])))
              , Build(NoAnnoList(Op("IntType", [])))
              )
            ]
          , Id()
          )
        )
      , RDefNoArgs(
          "to-java"
        , RuleNoCond(
            NoAnnoList(
              Op(
                "VarDeclInit"
              , [Var("name"), Var("type"), Var("exp")]
              )
            )
          , NoAnnoList(
              StringQuotation1(
                "                                        "
              , [ StringEscape1("                                        ", App(CallNoArgs(SVar("to-java")), Var("type")))
                , QStr(" ")
                , StringEscape1("                                                         ", Var("name"))
                , QStr(" = ")
                , StringEscape1("                                                                  ", App(CallNoArgs(SVar("to-java")), Var("exp")))
                , QStr(";\n      ")
                ]
              )
            )
          )
        )
      , RDefNoArgs(
          "to-java"
        , RuleNoCond(
            NoAnnoList(Op("Print", [Var("exp")]))
          , NoAnnoList(
              StringQuotation1(
                "                      "
              , [ QStr("System.out.println(")
                , StringEscape1("                                         ", App(CallNoArgs(SVar("to-java")), Var("exp")))
                , QStr(");\n      ")
                ]
              )
            )
          )
        )
      , RDefNoArgs(
          "to-java"
        , RuleNoCond(
            NoAnnoList(Op("Var", [Var("name")]))
          , Var("name")
          )
        )
      , RDefNoArgs(
          "to-java"
        , RuleNoCond(
            NoAnnoList(Op("PropAccess", [Var("exp"), Var("name")]))
          , NoAnnoList(
              StringQuotation1(
                "                                 "
              , [ StringEscape1("                                 ", App(CallNoArgs(SVar("to-java")), Var("exp")))
                , QStr(".")
                , StringEscape1("                                                 ", Var("name"))
                ]
              )
            )
          )
        )
      , RDefNoArgs(
          "to-java"
        , RuleNoCond(
            NoAnnoList(Op("Call", [Var("name"), Var("args")]))
          , NoAnnoList(
              StringQuotation1(
                "                            "
              , [ StringEscape1("                            ", Var("name"))
                , QStr("(")
                , StringEscape1(
                    "                                   "
                  , App(
                      Call(SVar("map"), [CallNoArgs(SVar("to-java"))])
                    , Var("args")
                    )
                  )
                , QStr(")")
                ]
              )
            )
          )
        )
      , RDefNoArgs(
          "to-java"
        , RuleNoCond(
            NoAnnoList(Op("StringLit", [Var("str")]))
          , Var("str")
          )
        )
      , RDefNoArgs(
          "to-java"
        , RuleNoCond(
            NoAnnoList(Op("IntLit", [Var("int")]))
          , Var("int")
          )
        )
      , RDefNoArgs(
          "to-java"
        , RuleNoCond(
            NoAnnoList(Op("Type", [Var("type")]))
          , Var("type")
          )
        )
      , RDefNoArgs(
          "to-java"
        , RuleNoCond(NoAnnoList(Op("StringType", [])), NoAnnoList(Str("\"String\"")))
        )
      , RDefNoArgs(
          "to-java"
        , RuleNoCond(NoAnnoList(Op("IntType", [])), NoAnnoList(Str("\"int\"")))
        )
      ]
    )
  ]
)
module generate

imports
    
  libstratego-lib
  include/CSharpPartialClassses
  lib/editor-common.generated
  lib/index-library
  lib/analysis-library
  lib/compilation-library
  types
  names
  splitter

rules // Partial class combining

  index-is-partial-ast = 
  	index-get-data(|Partial())
  
  index-combine-asts:
    asts -> ast
    with
    	class := <combine-classes> asts;
    	ast   := <index-merge-ast(|class)> asts
    
  combine-classes:
    classes -> class
    with
      <collect-one(?PartialClass(name, _) <+ ?PartialClass(name, _, _))> classes;
      fields  := <collect-all(?FieldDef(_, _))> classes;
      methods := <collect-all(?FunDef(_, _, _, _))> classes;
      class   := Class(name, <conc> (fields, methods))
            
rules // Incremental code generation of project
	
  index-compile-ast(|file, subfile):
    ast -> None()
    with
      if name := <index-path-to-string> <index-uri-path> subfile then
      	cs := <pp-csharppartialclassses-string> ast;
        full-path := <dirname> file;
        filename := <add-extension> (name, "cs");
        writePath := $[[full-path]/cs/];
        writeFile :=  $[[writePath][filename]];
        try(<mkdir> writePath);
        <fclose> <fputs> (cs, <fopen> (writeFile, "w"))
      end
  